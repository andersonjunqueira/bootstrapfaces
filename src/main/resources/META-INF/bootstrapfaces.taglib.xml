<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<facelet-taglib 
    xmlns="http://java.sun.com/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facelettaglibrary_2_0.xsd"
    version="2.0">

    <description>Biblioteca de componentes JSF customizados com o Twitter Bootstrap.</description>

    <namespace>http://www.neotech.com.br/bootstrapfaces</namespace>
    <composite-library-name>bootstrapfaces</composite-library-name>

    
    <tag>
        <description><![CDATA[
            &lt;span class="changed_modified_2_0"&gt;
            Renders&lt;/span&gt; an HTML "form" element.
            &lt;p&gt;Decode Behavior&lt;/p&gt;
            &lt;ul&gt;
            &lt;p&gt;Obtain the &lt;code&gt;Map&lt;/code&gt; from the
            "requestParameterMap"
            property of the &lt;code&gt;ExternalContext&lt;/code&gt;. If the map
            contains
            an entry for the "clientId" of this &lt;code&gt;UIForm&lt;/code&gt;
            component,
            call &lt;code&gt;setSubmitted(true)&lt;/code&gt; on the form,
            otherwise call
            &lt;code&gt;setSubmitted(false)&lt;/code&gt; on the form.&lt;/p&gt;
            &lt;/ul&gt;
            &lt;p&gt;Encode Behavior&lt;/p&gt;
            &lt;ul&gt;
            &lt;p&gt;The value of the "method" attribute must be "post". The
            value
            of the "action" attribute must be the result of passing the view
            identifier of the current view to the &lt;code&gt;getActionURL()&lt;/code&gt;
            method of the &lt;code&gt;ViewHandler&lt;/code&gt; for this
            application, then
            passing that String to the &lt;code&gt;encodeActionURL()&lt;/code&gt;
            method
            on the &lt;code&gt;ExternalContext&lt;/code&gt;. The value of the
            acceptcharset
            attribute must be rendered as the value of "accept-charset".
            If the "styleClass" attribute is specified, render its value as the
            value of the "class" attribute. Render a "name"
            attribute with a value the same as the "id" attribute as described
            in "&lt;a
            href="../../../renderkitdocs/HTML_BASIC/renderkit-summary.html#general_encoding"&gt;General
            Notes on
            Encoding&lt;/a&gt;" regarding the "id" attribute for UIInput
            components. &lt;p class="changed_added_2_0"&gt;Obtain the &lt;code&gt;UIViewRoot
            view identifier&lt;/code&gt; and
            use it to obtain an &lt;code&gt;action URL&lt;/code&gt; by calling
            &lt;code&gt;ViewHandler.getActionURL&lt;/code&gt;.
            Use the &lt;code&gt;action URL&lt;/code&gt; to obtain an &lt;code&gt;encoded
            action URL&lt;/code&gt; by calling
            &lt;code&gt;ExternalContext.encodeActionURL&lt;/code&gt;. Obtain an
            &lt;code&gt;encoded partial action URL&lt;/code&gt; by calling
            &lt;code&gt;ExternalContext.encodePartialActionURL&lt;/code&gt;
            using &lt;code&gt;action URL&lt;/code&gt; as the argument.
            Compare the result from &lt;code&gt;ExternalContext.encodePartialActionURL&lt;/code&gt;
            with the
            value from &lt;code&gt;ExternalContext.encodeActionURL()&lt;/code&gt;.
            If they are different,
            render a hidden field with the name &lt;code&gt;javax.faces.encodedURL&lt;/code&gt;
            and the value
            of this hidden field as the value from &lt;code&gt;ExternalContext.encodePartialActionURL&lt;/code&gt;.&lt;/p&gt;
            Call &lt;code&gt;ViewHandler.writeState()&lt;/code&gt;
            before the the close of the "form" element. Render all the
            necessary hidden fields for all commandLink instances in the page
            just before the close of the "form" element.
            &lt;div class="changed_modified_2_0"&gt;
            Just before rendering the closing &lt;code&gt;&amp;lt;/form&amp;gt;&lt;/code&gt;
            element tag, render
            any resources that have been targeted for this form:
            &lt;ul&gt;
            &lt;li&gt;Obtain a &lt;code&gt;UIViewRoot&lt;/code&gt; instance.&lt;/li&gt;
            &lt;li&gt;Obtain a &lt;code&gt;List&lt;/code&gt; of component
            resources targeted for
            this form with a call to &lt;code&gt;UIViewRoot.getComponentResources()&lt;/code&gt;
            with the &lt;code&gt;String "form"&lt;/code&gt; as the argument.&lt;/li&gt;
            &lt;li&gt;Iterate over the returned &lt;code&gt;List&lt;/code&gt; of
            &lt;code&gt;UIComponent&lt;/code&gt; instances
            and call &lt;code&gt;encodeAll&lt;/code&gt; on each &lt;code&gt;UIComponent&lt;/code&gt;
            instance.
            &lt;/ul&gt;
            &lt;/div&gt;
            &lt;/p&gt;
            &lt;/ul&gt;
            &lt;/div&gt;
        ]]></description>
        <tag-name>form</tag-name>
        <component>
            <component-type>neotech.bootstrapfaces.form</component-type>
            <renderer-type>neotech.bootstrapfaces.renderer.form</renderer-type>
        </component>

        <!-- ATRIBUTOS HTMLFORM -->
        <attribute>
    <description>
        The component identifier for this component. This value must be
        unique within the closest parent component that is a naming
        container.
    </description>
    <name>id</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating whether or not this form should prepend its id
        to its descendent's id during the clientId generation process.
        If this flag is not set, the default value is true.
    </description>
    <name>prependId</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating whether or not this component should be rendered
        (during Render Response Phase), or processed on any subsequent
        form submit. The default value for this property is true.
    </description>
    <name>rendered</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        List of content types that a server processing this form
        will handle correctly
    </description>
    <name>accept</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        List of character encodings for input data
        that are accepted by the server processing
        this form.
    </description>
    <name>acceptcharset</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Direction indication for text that does not inherit
        directionality.
        Valid values are "LTR" (left-to-right) and "RTL"
        (right-to-left).
    </description>
    <name>dir</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Content type used to submit the form to the server. If not
        specified, the default value is
        "application/x-www-form-urlencoded".
    </description>
    <name>enctype</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Code describing the language used in the generated markup
        for this component.
    </description>
    <name>lang</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        clicked over this element.
    </description>
    <name>onclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        double clicked over this element.
    </description>
    <name>ondblclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed down over this element.
    </description>
    <name>onkeydown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed and released over this element.
    </description>
    <name>onkeypress</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        released over this element.
    </description>
    <name>onkeyup</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        pressed down over this element.
    </description>
    <name>onmousedown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved within this element.
    </description>
    <name>onmousemove</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved away from this element.
    </description>
    <name>onmouseout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved onto this element.
    </description>
    <name>onmouseover</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        <![CDATA[Javascript code executed when a pointer button is
        released over this element.]]>
    </description>
    <name>
        onmouseup
    </name>
    <required>
        false
    </required>
    <type>
        java.lang.String
    </type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this form is reset.
    </description>
    <name>onreset</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        Javascript code executed when this form is submitted.
    </description>
    <name>onsubmit</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        CSS style(s) to be applied when this component is rendered.
    </description>
    <name>style</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Space-separated list of CSS style class(es) to be applied when
        this element is rendered. This value must be passed through
        as the "class" attribute on generated markup.
    </description>
    <name>styleClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Name of a frame where the response
        retrieved after this form submit is to
        be displayed.
    </description>
    <name>target</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        Advisory title information about markup elements generated for this component.
    </description>
    <name>title</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The ValueExpression linking this component to a property in a
        backing bean
    </description>
    <name>binding</name>
    <required>false</required>
    <type>javax.faces.component.UIComponent</type>
</attribute>

        <!-- ATRIBUTOS BOOTSTRAP -->
        <attribute>
    <description>Layout do form. Valores possíveis: vertical, inline, horizontal. Valor padrão: vertical.</description>
    <name>formLayout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Indica se o componente de mensagens será exibido. Valor padrão: true</description>
    <name>showMessages</name>
    <required>false</required>
    <type>java.lang.Boolean</type>
</attribute>

        <attribute>
    <description>
        Indica que apenas as mensagens não vinculadas a componentes serão apresentadas. Valor padrão: true
    </description>
    <name>globalOnly</name>
    <required>false</required>
    <type>java.lang.Boolean</type>
</attribute>

        <attribute>
    <description>
        O form apresentará mensagem de campos obrigatórios sempre que houver algum componente marcado
        como "required", no entanto "showHint" for definido como false, a mensagem não aparecerá, mesmo 
        havendo componentes "required". Essa propriedade impacta apenas a apresentação da mensagem.
        Valor padrão: true.
    </description>
    <name>showHint</name>
    <required>false</required>
    <type>java.lang.Boolean</type>
</attribute>


    </tag>

    <tag>
        <description><![CDATA[
        <p>Principal campo para entrada de informações nos formulários. Renderiza um componente "input" com o "type" igual a "text".</p>
        ]]></description>
        <tag-name>inputText</tag-name>
        <component>
            <component-type>neotech.bootstrapfaces.inputText</component-type>
            <renderer-type>neotech.bootstrapfaces.renderer.inputText</renderer-type>
        </component>

        <!-- ATRIBUTOS JSF -->
        <attribute>
    <description>
        Converter instance registered with this component.
    </description>
    <name>converter</name>
    <required>false</required>
    <type>javax.faces.convert.Converter</type>
</attribute>

        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the converter message, replacing any message
        that comes from the converter.
    </description>
    <name>converterMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        The component identifier for this component. This value must be
        unique within the closest parent component that is a naming
        container.
    </description>
    <name>id</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this component's value must be
        converted and validated immediately (that is, during
        Apply Request Values phase), rather than waiting
        until Process Validations phase.
    </description>
    <name>immediate</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating whether or not this component should be rendered
        (during Render Response Phase), or processed on any subsequent
        form submit. The default value for this property is true.
    </description>
    <name>rendered</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that the user is required to provide a submitted
        value for this input component.
    </description>
    <name>required</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validation message for the "required"
        facility, if the "required" facility is used.
    </description>
    <name>requiredMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        MethodExpression representing a validator method that will be
        called
        during Process Validations to perform correctness checks on the
        value of this component. The expression must evaluate to a
        public
        method that takes FacesContext, UIComponent, and Object
        parameters,
        with a return type of void.
    </description>
    <name>validator</name>
    <required>false</required>
    <method-signature>void validate(javax.faces.context.FacesContext,
        javax.faces.component.UIComponent, java.lang.Object)
    </method-signature>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validator message, replacing any
        message that comes from the validator.
    </description>
    <name>validatorMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The current value of this component.
    </description>
    <name>value</name>
    <required>false</required>
    <type>java.lang.Object</type>
</attribute>
        <attribute>
    <description>
        &lt;p&gt;
        MethodExpression representing a value change listener method
        that will be notified when a new value has been set for this
        input component. The expression must evaluate to a public
        method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt;
        parameter,
        with a return type of void, &lt;span class="changed_added_2_0"&gt;or
        to a public method that takes no arguments with a return type
        of void. In the latter case, the method has no way of easily
        knowing what the new value is, but this can be useful in cases
        where a notification is needed that "this value
        changed".&lt;/span&gt;
        &lt;/p&gt;
    </description>
    <name>valueChangeListener</name>
    <required>false</required>
    <method-signature>void
        valueChange(javax.faces.event.ValueChangeEvent)
    </method-signature>
</attribute>
        <attribute>
    <description>
        Access key that, when pressed, transfers focus
        to this element.
    </description>
    <name>accesskey</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Alternate textual description of the
        element rendered by this component.
    </description>
    <name>alt</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        If the value of this attribute is "off", render "off" as the
        value
        of the attribute. This indicates that the browser should
        disable its autocomplete feature for this component. This is
        useful for components that perform autocompletion and do not
        want the browser interfering. If this attribute is not set or
        the value
        is "on", render nothing.
    </description>
    <name>autocomplete</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Direction indication for text that does not inherit
        directionality.
        Valid values are "LTR" (left-to-right) and "RTL"
        (right-to-left).
    </description>
    <name>dir</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this element must never receive focus or
        be included in a subsequent submit. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as disabled="disabled".
    </description>
    <name>disabled</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A localized user presentable name for this component.
    </description>
    <name>label</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Code describing the language used in the generated markup
        for this component.
    </description>
    <name>lang</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The maximum number of characters that may
        be entered in this field.
    </description>
    <name>maxlength</name>
    <required>false</required>
    <type>int</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus.
    </description>
    <name>onblur</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus
        and its value has been modified since gaining focus.
    </description>
    <name>onchange</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        clicked over this element.
    </description>
    <name>onclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        double clicked over this element.
    </description>
    <name>ondblclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element receives focus.
    </description>
    <name>onfocus</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed down over this element.
    </description>
    <name>onkeydown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed and released over this element.
    </description>
    <name>onkeypress</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        released over this element.
    </description>
    <name>onkeyup</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        pressed down over this element.
    </description>
    <name>onmousedown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved within this element.
    </description>
    <name>onmousemove</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved away from this element.
    </description>
    <name>onmouseout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved onto this element.
    </description>
    <name>onmouseover</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        <![CDATA[Javascript code executed when a pointer button is
        released over this element.]]>
    </description>
    <name>
        onmouseup
    </name>
    <required>
        false
    </required>
    <type>
        java.lang.String
    </type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when text within this
        element is selected by the user.
    </description>
    <name>onselect</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        Flag indicating that this component will prohibit changes by
        the user. The element may receive focus unless it has also
        been disabled. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as readonly="readonly".
    </description>
    <name>readonly</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        The number of characters used to determine
        the width of this field.
    </description>
    <name>size</name>
    <required>false</required>
    <type>int</type>
</attribute>
        <attribute>
    <description>
        CSS style(s) to be applied when this component is rendered.
    </description>
    <name>style</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Space-separated list of CSS style class(es) to be applied when
        this element is rendered. This value must be passed through
        as the "class" attribute on generated markup.
    </description>
    <name>styleClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Position of this element in the tabbing order
        for the current document. This value must be
        an integer between 0 and 32767.
    </description>
    <name>tabindex</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Advisory title information about markup elements generated for this component.
    </description>
    <name>title</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The ValueExpression linking this component to a property in a
        backing bean
    </description>
    <name>binding</name>
    <required>false</required>
    <type>javax.faces.component.UIComponent</type>
</attribute>

        <!-- ATRIBUTOS BOOTSTRAP -->
        <attribute>
    <description>Layout do form. Valores possíveis: vertical, inline, horizontal. Valor padrão: vertical.</description>
    <name>formLayout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Define se o label deverá ser exibido ou não</description>
    <name>showLabel</name>
    <required>false</required>
    <type>java.lang.Boolean</type>
</attribute>
        <attribute>
    <description>Tamanho do componente para forms com layout horizontal. Valores: 1 a 12</description>
    <name>inputSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description>Tamanho do label para forms com layout horizontal. Valores: 1 a 12</description>
    <name>labelSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define a posição de apresentação do tooltip.</p>
    <p>Valores possíveis: top, left, bottom, right.</p>
    <p>OBS: aparentemente o tooltip posicionado a esquerda não funciona dentro de divs que definem grids.</p>
    ]]></description>
    <name>tooltipPosition</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Texto de ajuda apresentado no componente e removido quando algo é digitado</description>
    <name>placeholder</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Texto decorativo apresentado à esquerda do componente</description>
    <name>prepend</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Texto decorativo apresentado à direita do componente</description>
    <name>append</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Breve descrição sempre visível logo abaixo do componente</description>
    <name>hint</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define um script javascript que será executado após a renderização do componente.</p>
    ]]></description>
    <name>initScript</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

    </tag>
    <tag>
        <description><![CDATA[
        <p>Renderiza um componente "input" com o "type" igual a "password".</p>
        ]]></description>
        <tag-name>inputSecret</tag-name>
        <component>
            <component-type>neotech.bootstrapfaces.inputSecret</component-type>
            <renderer-type>neotech.bootstrapfaces.renderer.inputText</renderer-type>
        </component>

        <!-- ATRIBUTOS JSF -->
        <attribute>
    <description>
        Converter instance registered with this component.
    </description>
    <name>converter</name>
    <required>false</required>
    <type>javax.faces.convert.Converter</type>
</attribute>

        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the converter message, replacing any message
        that comes from the converter.
    </description>
    <name>converterMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        The component identifier for this component. This value must be
        unique within the closest parent component that is a naming
        container.
    </description>
    <name>id</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this component's value must be
        converted and validated immediately (that is, during
        Apply Request Values phase), rather than waiting
        until Process Validations phase.
    </description>
    <name>immediate</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating whether or not this component should be rendered
        (during Render Response Phase), or processed on any subsequent
        form submit. The default value for this property is true.
    </description>
    <name>rendered</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that the user is required to provide a submitted
        value for this input component.
    </description>
    <name>required</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validation message for the "required"
        facility, if the "required" facility is used.
    </description>
    <name>requiredMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        MethodExpression representing a validator method that will be
        called
        during Process Validations to perform correctness checks on the
        value of this component. The expression must evaluate to a
        public
        method that takes FacesContext, UIComponent, and Object
        parameters,
        with a return type of void.
    </description>
    <name>validator</name>
    <required>false</required>
    <method-signature>void validate(javax.faces.context.FacesContext,
        javax.faces.component.UIComponent, java.lang.Object)
    </method-signature>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validator message, replacing any
        message that comes from the validator.
    </description>
    <name>validatorMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The current value of this component.
    </description>
    <name>value</name>
    <required>false</required>
    <type>java.lang.Object</type>
</attribute>
        <attribute>
    <description>
        &lt;p&gt;
        MethodExpression representing a value change listener method
        that will be notified when a new value has been set for this
        input component. The expression must evaluate to a public
        method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt;
        parameter,
        with a return type of void, &lt;span class="changed_added_2_0"&gt;or
        to a public method that takes no arguments with a return type
        of void. In the latter case, the method has no way of easily
        knowing what the new value is, but this can be useful in cases
        where a notification is needed that "this value
        changed".&lt;/span&gt;
        &lt;/p&gt;
    </description>
    <name>valueChangeListener</name>
    <required>false</required>
    <method-signature>void
        valueChange(javax.faces.event.ValueChangeEvent)
    </method-signature>
</attribute>
        <attribute>
    <description>
        Access key that, when pressed, transfers focus
        to this element.
    </description>
    <name>accesskey</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Alternate textual description of the
        element rendered by this component.
    </description>
    <name>alt</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        If the value of this attribute is "off", render "off" as the
        value
        of the attribute. This indicates that the browser should
        disable its autocomplete feature for this component. This is
        useful for components that perform autocompletion and do not
        want the browser interfering. If this attribute is not set or
        the value
        is "on", render nothing.
    </description>
    <name>autocomplete</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Direction indication for text that does not inherit
        directionality.
        Valid values are "LTR" (left-to-right) and "RTL"
        (right-to-left).
    </description>
    <name>dir</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this element must never receive focus or
        be included in a subsequent submit. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as disabled="disabled".
    </description>
    <name>disabled</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A localized user presentable name for this component.
    </description>
    <name>label</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Code describing the language used in the generated markup
        for this component.
    </description>
    <name>lang</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The maximum number of characters that may
        be entered in this field.
    </description>
    <name>maxlength</name>
    <required>false</required>
    <type>int</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus.
    </description>
    <name>onblur</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus
        and its value has been modified since gaining focus.
    </description>
    <name>onchange</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        clicked over this element.
    </description>
    <name>onclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        double clicked over this element.
    </description>
    <name>ondblclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element receives focus.
    </description>
    <name>onfocus</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed down over this element.
    </description>
    <name>onkeydown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed and released over this element.
    </description>
    <name>onkeypress</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        released over this element.
    </description>
    <name>onkeyup</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        pressed down over this element.
    </description>
    <name>onmousedown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved within this element.
    </description>
    <name>onmousemove</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved away from this element.
    </description>
    <name>onmouseout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved onto this element.
    </description>
    <name>onmouseover</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        <![CDATA[Javascript code executed when a pointer button is
        released over this element.]]>
    </description>
    <name>
        onmouseup
    </name>
    <required>
        false
    </required>
    <type>
        java.lang.String
    </type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when text within this
        element is selected by the user.
    </description>
    <name>onselect</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        Flag indicating that this component will prohibit changes by
        the user. The element may receive focus unless it has also
        been disabled. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as readonly="readonly".
    </description>
    <name>readonly</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        The number of characters used to determine
        the width of this field.
    </description>
    <name>size</name>
    <required>false</required>
    <type>int</type>
</attribute>
        <attribute>
    <description>
        CSS style(s) to be applied when this component is rendered.
    </description>
    <name>style</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Space-separated list of CSS style class(es) to be applied when
        this element is rendered. This value must be passed through
        as the "class" attribute on generated markup.
    </description>
    <name>styleClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Position of this element in the tabbing order
        for the current document. This value must be
        an integer between 0 and 32767.
    </description>
    <name>tabindex</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Advisory title information about markup elements generated for this component.
    </description>
    <name>title</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The ValueExpression linking this component to a property in a
        backing bean
    </description>
    <name>binding</name>
    <required>false</required>
    <type>javax.faces.component.UIComponent</type>
</attribute>

        <!-- ATRIBUTOS BOOTSTRAP -->
        <attribute>
    <description>Layout do form. Valores possíveis: vertical, inline, horizontal. Valor padrão: vertical.</description>
    <name>formLayout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Define se o label deverá ser exibido ou não</description>
    <name>showLabel</name>
    <required>false</required>
    <type>java.lang.Boolean</type>
</attribute>
        <attribute>
    <description>Tamanho do componente para forms com layout horizontal. Valores: 1 a 12</description>
    <name>inputSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description>Tamanho do label para forms com layout horizontal. Valores: 1 a 12</description>
    <name>labelSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define a posição de apresentação do tooltip.</p>
    <p>Valores possíveis: top, left, bottom, right.</p>
    <p>OBS: aparentemente o tooltip posicionado a esquerda não funciona dentro de divs que definem grids.</p>
    ]]></description>
    <name>tooltipPosition</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Texto de ajuda apresentado no componente e removido quando algo é digitado</description>
    <name>placeholder</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Texto decorativo apresentado à esquerda do componente</description>
    <name>prepend</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Texto decorativo apresentado à direita do componente</description>
    <name>append</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Breve descrição sempre visível logo abaixo do componente</description>
    <name>hint</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define um script javascript que será executado após a renderização do componente.</p>
    ]]></description>
    <name>initScript</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

    </tag>
    <tag>
        <description><![CDATA[
        <p>Renderiza um componente "input" com o "type" igual a "text" com possibilidade de se aplicar uma máscara para entrada de dados.</p>
        ]]></description>
        <tag-name>inputTextMask</tag-name>
        <component>
            <component-type>neotech.bootstrapfaces.inputTextMask</component-type>
            <renderer-type>neotech.bootstrapfaces.renderer.inputText</renderer-type>
        </component>

        <!-- ATRIBUTOS JSF -->
        <attribute>
    <description>
        Converter instance registered with this component.
    </description>
    <name>converter</name>
    <required>false</required>
    <type>javax.faces.convert.Converter</type>
</attribute>

        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the converter message, replacing any message
        that comes from the converter.
    </description>
    <name>converterMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        The component identifier for this component. This value must be
        unique within the closest parent component that is a naming
        container.
    </description>
    <name>id</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this component's value must be
        converted and validated immediately (that is, during
        Apply Request Values phase), rather than waiting
        until Process Validations phase.
    </description>
    <name>immediate</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating whether or not this component should be rendered
        (during Render Response Phase), or processed on any subsequent
        form submit. The default value for this property is true.
    </description>
    <name>rendered</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that the user is required to provide a submitted
        value for this input component.
    </description>
    <name>required</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validation message for the "required"
        facility, if the "required" facility is used.
    </description>
    <name>requiredMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        MethodExpression representing a validator method that will be
        called
        during Process Validations to perform correctness checks on the
        value of this component. The expression must evaluate to a
        public
        method that takes FacesContext, UIComponent, and Object
        parameters,
        with a return type of void.
    </description>
    <name>validator</name>
    <required>false</required>
    <method-signature>void validate(javax.faces.context.FacesContext,
        javax.faces.component.UIComponent, java.lang.Object)
    </method-signature>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validator message, replacing any
        message that comes from the validator.
    </description>
    <name>validatorMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The current value of this component.
    </description>
    <name>value</name>
    <required>false</required>
    <type>java.lang.Object</type>
</attribute>
        <attribute>
    <description>
        &lt;p&gt;
        MethodExpression representing a value change listener method
        that will be notified when a new value has been set for this
        input component. The expression must evaluate to a public
        method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt;
        parameter,
        with a return type of void, &lt;span class="changed_added_2_0"&gt;or
        to a public method that takes no arguments with a return type
        of void. In the latter case, the method has no way of easily
        knowing what the new value is, but this can be useful in cases
        where a notification is needed that "this value
        changed".&lt;/span&gt;
        &lt;/p&gt;
    </description>
    <name>valueChangeListener</name>
    <required>false</required>
    <method-signature>void
        valueChange(javax.faces.event.ValueChangeEvent)
    </method-signature>
</attribute>
        <attribute>
    <description>
        Access key that, when pressed, transfers focus
        to this element.
    </description>
    <name>accesskey</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Alternate textual description of the
        element rendered by this component.
    </description>
    <name>alt</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        If the value of this attribute is "off", render "off" as the
        value
        of the attribute. This indicates that the browser should
        disable its autocomplete feature for this component. This is
        useful for components that perform autocompletion and do not
        want the browser interfering. If this attribute is not set or
        the value
        is "on", render nothing.
    </description>
    <name>autocomplete</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Direction indication for text that does not inherit
        directionality.
        Valid values are "LTR" (left-to-right) and "RTL"
        (right-to-left).
    </description>
    <name>dir</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this element must never receive focus or
        be included in a subsequent submit. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as disabled="disabled".
    </description>
    <name>disabled</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A localized user presentable name for this component.
    </description>
    <name>label</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Code describing the language used in the generated markup
        for this component.
    </description>
    <name>lang</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The maximum number of characters that may
        be entered in this field.
    </description>
    <name>maxlength</name>
    <required>false</required>
    <type>int</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus.
    </description>
    <name>onblur</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus
        and its value has been modified since gaining focus.
    </description>
    <name>onchange</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        clicked over this element.
    </description>
    <name>onclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        double clicked over this element.
    </description>
    <name>ondblclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element receives focus.
    </description>
    <name>onfocus</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed down over this element.
    </description>
    <name>onkeydown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed and released over this element.
    </description>
    <name>onkeypress</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        released over this element.
    </description>
    <name>onkeyup</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        pressed down over this element.
    </description>
    <name>onmousedown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved within this element.
    </description>
    <name>onmousemove</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved away from this element.
    </description>
    <name>onmouseout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved onto this element.
    </description>
    <name>onmouseover</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        <![CDATA[Javascript code executed when a pointer button is
        released over this element.]]>
    </description>
    <name>
        onmouseup
    </name>
    <required>
        false
    </required>
    <type>
        java.lang.String
    </type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when text within this
        element is selected by the user.
    </description>
    <name>onselect</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        Flag indicating that this component will prohibit changes by
        the user. The element may receive focus unless it has also
        been disabled. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as readonly="readonly".
    </description>
    <name>readonly</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        The number of characters used to determine
        the width of this field.
    </description>
    <name>size</name>
    <required>false</required>
    <type>int</type>
</attribute>
        <attribute>
    <description>
        CSS style(s) to be applied when this component is rendered.
    </description>
    <name>style</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Space-separated list of CSS style class(es) to be applied when
        this element is rendered. This value must be passed through
        as the "class" attribute on generated markup.
    </description>
    <name>styleClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Position of this element in the tabbing order
        for the current document. This value must be
        an integer between 0 and 32767.
    </description>
    <name>tabindex</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Advisory title information about markup elements generated for this component.
    </description>
    <name>title</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The ValueExpression linking this component to a property in a
        backing bean
    </description>
    <name>binding</name>
    <required>false</required>
    <type>javax.faces.component.UIComponent</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define a posição de apresentação do tooltip.</p>
    <p>Valores possíveis: top, left, bottom, right.</p>
    <p>OBS: aparentemente o tooltip posicionado a esquerda não funciona dentro de divs que definem grids.</p>
    ]]></description>
    <name>tooltipPosition</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <!-- ATRIBUTOS BOOTSTRAP -->
        <attribute>
    <description>Layout do form. Valores possíveis: vertical, inline, horizontal. Valor padrão: vertical.</description>
    <name>formLayout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Define se o label deverá ser exibido ou não</description>
    <name>showLabel</name>
    <required>false</required>
    <type>java.lang.Boolean</type>
</attribute>
        <attribute>
    <description>Tamanho do componente para forms com layout horizontal. Valores: 1 a 12</description>
    <name>inputSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description>Tamanho do label para forms com layout horizontal. Valores: 1 a 12</description>
    <name>labelSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define a posição de apresentação do tooltip.</p>
    <p>Valores possíveis: top, left, bottom, right.</p>
    <p>OBS: aparentemente o tooltip posicionado a esquerda não funciona dentro de divs que definem grids.</p>
    ]]></description>
    <name>tooltipPosition</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Texto de ajuda apresentado no componente e removido quando algo é digitado</description>
    <name>placeholder</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Texto decorativo apresentado à esquerda do componente</description>
    <name>prepend</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Texto decorativo apresentado à direita do componente</description>
    <name>append</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Breve descrição sempre visível logo abaixo do componente</description>
    <name>hint</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define um script javascript que será executado após a renderização do componente.</p>
    ]]></description>
    <name>initScript</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

    </tag>
    <tag>
        <description><![CDATA[
        <p>Renderiza um componente "input" com o "type" igual a "text" com  máscara e validação para número CPF.</p>
        ]]></description>
        <tag-name>inputTextCPF</tag-name>
        <component>
            <component-type>neotech.bootstrapfaces.inputTextCPF</component-type>
            <renderer-type>neotech.bootstrapfaces.renderer.inputText</renderer-type>
        </component>

        <!-- ATRIBUTOS JSF -->
        <attribute>
    <description>
        Converter instance registered with this component.
    </description>
    <name>converter</name>
    <required>false</required>
    <type>javax.faces.convert.Converter</type>
</attribute>

        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the converter message, replacing any message
        that comes from the converter.
    </description>
    <name>converterMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        The component identifier for this component. This value must be
        unique within the closest parent component that is a naming
        container.
    </description>
    <name>id</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this component's value must be
        converted and validated immediately (that is, during
        Apply Request Values phase), rather than waiting
        until Process Validations phase.
    </description>
    <name>immediate</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating whether or not this component should be rendered
        (during Render Response Phase), or processed on any subsequent
        form submit. The default value for this property is true.
    </description>
    <name>rendered</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that the user is required to provide a submitted
        value for this input component.
    </description>
    <name>required</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validation message for the "required"
        facility, if the "required" facility is used.
    </description>
    <name>requiredMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        MethodExpression representing a validator method that will be
        called
        during Process Validations to perform correctness checks on the
        value of this component. The expression must evaluate to a
        public
        method that takes FacesContext, UIComponent, and Object
        parameters,
        with a return type of void.
    </description>
    <name>validator</name>
    <required>false</required>
    <method-signature>void validate(javax.faces.context.FacesContext,
        javax.faces.component.UIComponent, java.lang.Object)
    </method-signature>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validator message, replacing any
        message that comes from the validator.
    </description>
    <name>validatorMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The current value of this component.
    </description>
    <name>value</name>
    <required>false</required>
    <type>java.lang.Object</type>
</attribute>
        <attribute>
    <description>
        &lt;p&gt;
        MethodExpression representing a value change listener method
        that will be notified when a new value has been set for this
        input component. The expression must evaluate to a public
        method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt;
        parameter,
        with a return type of void, &lt;span class="changed_added_2_0"&gt;or
        to a public method that takes no arguments with a return type
        of void. In the latter case, the method has no way of easily
        knowing what the new value is, but this can be useful in cases
        where a notification is needed that "this value
        changed".&lt;/span&gt;
        &lt;/p&gt;
    </description>
    <name>valueChangeListener</name>
    <required>false</required>
    <method-signature>void
        valueChange(javax.faces.event.ValueChangeEvent)
    </method-signature>
</attribute>
        <attribute>
    <description>
        Access key that, when pressed, transfers focus
        to this element.
    </description>
    <name>accesskey</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Alternate textual description of the
        element rendered by this component.
    </description>
    <name>alt</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        If the value of this attribute is "off", render "off" as the
        value
        of the attribute. This indicates that the browser should
        disable its autocomplete feature for this component. This is
        useful for components that perform autocompletion and do not
        want the browser interfering. If this attribute is not set or
        the value
        is "on", render nothing.
    </description>
    <name>autocomplete</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Direction indication for text that does not inherit
        directionality.
        Valid values are "LTR" (left-to-right) and "RTL"
        (right-to-left).
    </description>
    <name>dir</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this element must never receive focus or
        be included in a subsequent submit. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as disabled="disabled".
    </description>
    <name>disabled</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A localized user presentable name for this component.
    </description>
    <name>label</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Code describing the language used in the generated markup
        for this component.
    </description>
    <name>lang</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The maximum number of characters that may
        be entered in this field.
    </description>
    <name>maxlength</name>
    <required>false</required>
    <type>int</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus.
    </description>
    <name>onblur</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus
        and its value has been modified since gaining focus.
    </description>
    <name>onchange</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        clicked over this element.
    </description>
    <name>onclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        double clicked over this element.
    </description>
    <name>ondblclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element receives focus.
    </description>
    <name>onfocus</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed down over this element.
    </description>
    <name>onkeydown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed and released over this element.
    </description>
    <name>onkeypress</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        released over this element.
    </description>
    <name>onkeyup</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        pressed down over this element.
    </description>
    <name>onmousedown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved within this element.
    </description>
    <name>onmousemove</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved away from this element.
    </description>
    <name>onmouseout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved onto this element.
    </description>
    <name>onmouseover</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        <![CDATA[Javascript code executed when a pointer button is
        released over this element.]]>
    </description>
    <name>
        onmouseup
    </name>
    <required>
        false
    </required>
    <type>
        java.lang.String
    </type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when text within this
        element is selected by the user.
    </description>
    <name>onselect</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        Flag indicating that this component will prohibit changes by
        the user. The element may receive focus unless it has also
        been disabled. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as readonly="readonly".
    </description>
    <name>readonly</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        The number of characters used to determine
        the width of this field.
    </description>
    <name>size</name>
    <required>false</required>
    <type>int</type>
</attribute>
        <attribute>
    <description>
        CSS style(s) to be applied when this component is rendered.
    </description>
    <name>style</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Space-separated list of CSS style class(es) to be applied when
        this element is rendered. This value must be passed through
        as the "class" attribute on generated markup.
    </description>
    <name>styleClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Position of this element in the tabbing order
        for the current document. This value must be
        an integer between 0 and 32767.
    </description>
    <name>tabindex</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Advisory title information about markup elements generated for this component.
    </description>
    <name>title</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The ValueExpression linking this component to a property in a
        backing bean
    </description>
    <name>binding</name>
    <required>false</required>
    <type>javax.faces.component.UIComponent</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define a posição de apresentação do tooltip.</p>
    <p>Valores possíveis: top, left, bottom, right.</p>
    <p>OBS: aparentemente o tooltip posicionado a esquerda não funciona dentro de divs que definem grids.</p>
    ]]></description>
    <name>tooltipPosition</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <!-- ATRIBUTOS BOOTSTRAP -->
        <attribute>
    <description>Layout do form. Valores possíveis: vertical, inline, horizontal. Valor padrão: vertical.</description>
    <name>formLayout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Define se o label deverá ser exibido ou não</description>
    <name>showLabel</name>
    <required>false</required>
    <type>java.lang.Boolean</type>
</attribute>
        <attribute>
    <description>Tamanho do componente para forms com layout horizontal. Valores: 1 a 12</description>
    <name>inputSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description>Tamanho do label para forms com layout horizontal. Valores: 1 a 12</description>
    <name>labelSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define a posição de apresentação do tooltip.</p>
    <p>Valores possíveis: top, left, bottom, right.</p>
    <p>OBS: aparentemente o tooltip posicionado a esquerda não funciona dentro de divs que definem grids.</p>
    ]]></description>
    <name>tooltipPosition</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Texto de ajuda apresentado no componente e removido quando algo é digitado</description>
    <name>placeholder</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Texto decorativo apresentado à esquerda do componente</description>
    <name>prepend</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Texto decorativo apresentado à direita do componente</description>
    <name>append</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Breve descrição sempre visível logo abaixo do componente</description>
    <name>hint</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define um script javascript que será executado após a renderização do componente.</p>
    ]]></description>
    <name>initScript</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

    </tag>
    <tag>
        <description><![CDATA[
        <p>Renderiza um componente "input" com o "type" igual a "text" com  máscara e validação para número processos.</p>
        ]]></description>
        <tag-name>inputTextProcesso</tag-name>
        <component>
            <component-type>neotech.bootstrapfaces.inputTextProcesso</component-type>
            <renderer-type>neotech.bootstrapfaces.renderer.inputText</renderer-type>
        </component>

        <!-- ATRIBUTOS JSF -->
        <attribute>
    <description>
        Converter instance registered with this component.
    </description>
    <name>converter</name>
    <required>false</required>
    <type>javax.faces.convert.Converter</type>
</attribute>

        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the converter message, replacing any message
        that comes from the converter.
    </description>
    <name>converterMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        The component identifier for this component. This value must be
        unique within the closest parent component that is a naming
        container.
    </description>
    <name>id</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this component's value must be
        converted and validated immediately (that is, during
        Apply Request Values phase), rather than waiting
        until Process Validations phase.
    </description>
    <name>immediate</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating whether or not this component should be rendered
        (during Render Response Phase), or processed on any subsequent
        form submit. The default value for this property is true.
    </description>
    <name>rendered</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that the user is required to provide a submitted
        value for this input component.
    </description>
    <name>required</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validation message for the "required"
        facility, if the "required" facility is used.
    </description>
    <name>requiredMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        MethodExpression representing a validator method that will be
        called
        during Process Validations to perform correctness checks on the
        value of this component. The expression must evaluate to a
        public
        method that takes FacesContext, UIComponent, and Object
        parameters,
        with a return type of void.
    </description>
    <name>validator</name>
    <required>false</required>
    <method-signature>void validate(javax.faces.context.FacesContext,
        javax.faces.component.UIComponent, java.lang.Object)
    </method-signature>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validator message, replacing any
        message that comes from the validator.
    </description>
    <name>validatorMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The current value of this component.
    </description>
    <name>value</name>
    <required>false</required>
    <type>java.lang.Object</type>
</attribute>
        <attribute>
    <description>
        &lt;p&gt;
        MethodExpression representing a value change listener method
        that will be notified when a new value has been set for this
        input component. The expression must evaluate to a public
        method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt;
        parameter,
        with a return type of void, &lt;span class="changed_added_2_0"&gt;or
        to a public method that takes no arguments with a return type
        of void. In the latter case, the method has no way of easily
        knowing what the new value is, but this can be useful in cases
        where a notification is needed that "this value
        changed".&lt;/span&gt;
        &lt;/p&gt;
    </description>
    <name>valueChangeListener</name>
    <required>false</required>
    <method-signature>void
        valueChange(javax.faces.event.ValueChangeEvent)
    </method-signature>
</attribute>
        <attribute>
    <description>
        Access key that, when pressed, transfers focus
        to this element.
    </description>
    <name>accesskey</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Alternate textual description of the
        element rendered by this component.
    </description>
    <name>alt</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        If the value of this attribute is "off", render "off" as the
        value
        of the attribute. This indicates that the browser should
        disable its autocomplete feature for this component. This is
        useful for components that perform autocompletion and do not
        want the browser interfering. If this attribute is not set or
        the value
        is "on", render nothing.
    </description>
    <name>autocomplete</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Direction indication for text that does not inherit
        directionality.
        Valid values are "LTR" (left-to-right) and "RTL"
        (right-to-left).
    </description>
    <name>dir</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this element must never receive focus or
        be included in a subsequent submit. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as disabled="disabled".
    </description>
    <name>disabled</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A localized user presentable name for this component.
    </description>
    <name>label</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Code describing the language used in the generated markup
        for this component.
    </description>
    <name>lang</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The maximum number of characters that may
        be entered in this field.
    </description>
    <name>maxlength</name>
    <required>false</required>
    <type>int</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus.
    </description>
    <name>onblur</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus
        and its value has been modified since gaining focus.
    </description>
    <name>onchange</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        clicked over this element.
    </description>
    <name>onclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        double clicked over this element.
    </description>
    <name>ondblclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element receives focus.
    </description>
    <name>onfocus</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed down over this element.
    </description>
    <name>onkeydown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed and released over this element.
    </description>
    <name>onkeypress</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        released over this element.
    </description>
    <name>onkeyup</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        pressed down over this element.
    </description>
    <name>onmousedown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved within this element.
    </description>
    <name>onmousemove</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved away from this element.
    </description>
    <name>onmouseout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved onto this element.
    </description>
    <name>onmouseover</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        <![CDATA[Javascript code executed when a pointer button is
        released over this element.]]>
    </description>
    <name>
        onmouseup
    </name>
    <required>
        false
    </required>
    <type>
        java.lang.String
    </type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when text within this
        element is selected by the user.
    </description>
    <name>onselect</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        Flag indicating that this component will prohibit changes by
        the user. The element may receive focus unless it has also
        been disabled. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as readonly="readonly".
    </description>
    <name>readonly</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        The number of characters used to determine
        the width of this field.
    </description>
    <name>size</name>
    <required>false</required>
    <type>int</type>
</attribute>
        <attribute>
    <description>
        CSS style(s) to be applied when this component is rendered.
    </description>
    <name>style</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Space-separated list of CSS style class(es) to be applied when
        this element is rendered. This value must be passed through
        as the "class" attribute on generated markup.
    </description>
    <name>styleClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Position of this element in the tabbing order
        for the current document. This value must be
        an integer between 0 and 32767.
    </description>
    <name>tabindex</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Advisory title information about markup elements generated for this component.
    </description>
    <name>title</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The ValueExpression linking this component to a property in a
        backing bean
    </description>
    <name>binding</name>
    <required>false</required>
    <type>javax.faces.component.UIComponent</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define a posição de apresentação do tooltip.</p>
    <p>Valores possíveis: top, left, bottom, right.</p>
    <p>OBS: aparentemente o tooltip posicionado a esquerda não funciona dentro de divs que definem grids.</p>
    ]]></description>
    <name>tooltipPosition</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <!-- ATRIBUTOS BOOTSTRAP -->
        <attribute>
    <description>Layout do form. Valores possíveis: vertical, inline, horizontal. Valor padrão: vertical.</description>
    <name>formLayout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Define se o label deverá ser exibido ou não</description>
    <name>showLabel</name>
    <required>false</required>
    <type>java.lang.Boolean</type>
</attribute>
        <attribute>
    <description>Tamanho do componente para forms com layout horizontal. Valores: 1 a 12</description>
    <name>inputSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description>Tamanho do label para forms com layout horizontal. Valores: 1 a 12</description>
    <name>labelSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define a posição de apresentação do tooltip.</p>
    <p>Valores possíveis: top, left, bottom, right.</p>
    <p>OBS: aparentemente o tooltip posicionado a esquerda não funciona dentro de divs que definem grids.</p>
    ]]></description>
    <name>tooltipPosition</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Texto de ajuda apresentado no componente e removido quando algo é digitado</description>
    <name>placeholder</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Texto decorativo apresentado à esquerda do componente</description>
    <name>prepend</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Texto decorativo apresentado à direita do componente</description>
    <name>append</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Breve descrição sempre visível logo abaixo do componente</description>
    <name>hint</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define um script javascript que será executado após a renderização do componente.</p>
    ]]></description>
    <name>initScript</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

    </tag>
    <tag>
        <description><![CDATA[
        <p>Renderiza um componente "input" com o "type" igual a "text" com  máscara e validação para número CNPJ.</p>
        ]]></description>
        <tag-name>inputTextCNPJ</tag-name>
        <component>
            <component-type>neotech.bootstrapfaces.inputTextCNPJ</component-type>
            <renderer-type>neotech.bootstrapfaces.renderer.inputText</renderer-type>
        </component>

        <!-- ATRIBUTOS JSF -->
        <attribute>
    <description>
        Converter instance registered with this component.
    </description>
    <name>converter</name>
    <required>false</required>
    <type>javax.faces.convert.Converter</type>
</attribute>

        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the converter message, replacing any message
        that comes from the converter.
    </description>
    <name>converterMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        The component identifier for this component. This value must be
        unique within the closest parent component that is a naming
        container.
    </description>
    <name>id</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this component's value must be
        converted and validated immediately (that is, during
        Apply Request Values phase), rather than waiting
        until Process Validations phase.
    </description>
    <name>immediate</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating whether or not this component should be rendered
        (during Render Response Phase), or processed on any subsequent
        form submit. The default value for this property is true.
    </description>
    <name>rendered</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that the user is required to provide a submitted
        value for this input component.
    </description>
    <name>required</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validation message for the "required"
        facility, if the "required" facility is used.
    </description>
    <name>requiredMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        MethodExpression representing a validator method that will be
        called
        during Process Validations to perform correctness checks on the
        value of this component. The expression must evaluate to a
        public
        method that takes FacesContext, UIComponent, and Object
        parameters,
        with a return type of void.
    </description>
    <name>validator</name>
    <required>false</required>
    <method-signature>void validate(javax.faces.context.FacesContext,
        javax.faces.component.UIComponent, java.lang.Object)
    </method-signature>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validator message, replacing any
        message that comes from the validator.
    </description>
    <name>validatorMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The current value of this component.
    </description>
    <name>value</name>
    <required>false</required>
    <type>java.lang.Object</type>
</attribute>
        <attribute>
    <description>
        &lt;p&gt;
        MethodExpression representing a value change listener method
        that will be notified when a new value has been set for this
        input component. The expression must evaluate to a public
        method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt;
        parameter,
        with a return type of void, &lt;span class="changed_added_2_0"&gt;or
        to a public method that takes no arguments with a return type
        of void. In the latter case, the method has no way of easily
        knowing what the new value is, but this can be useful in cases
        where a notification is needed that "this value
        changed".&lt;/span&gt;
        &lt;/p&gt;
    </description>
    <name>valueChangeListener</name>
    <required>false</required>
    <method-signature>void
        valueChange(javax.faces.event.ValueChangeEvent)
    </method-signature>
</attribute>
        <attribute>
    <description>
        Access key that, when pressed, transfers focus
        to this element.
    </description>
    <name>accesskey</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Alternate textual description of the
        element rendered by this component.
    </description>
    <name>alt</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        If the value of this attribute is "off", render "off" as the
        value
        of the attribute. This indicates that the browser should
        disable its autocomplete feature for this component. This is
        useful for components that perform autocompletion and do not
        want the browser interfering. If this attribute is not set or
        the value
        is "on", render nothing.
    </description>
    <name>autocomplete</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Direction indication for text that does not inherit
        directionality.
        Valid values are "LTR" (left-to-right) and "RTL"
        (right-to-left).
    </description>
    <name>dir</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this element must never receive focus or
        be included in a subsequent submit. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as disabled="disabled".
    </description>
    <name>disabled</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A localized user presentable name for this component.
    </description>
    <name>label</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Code describing the language used in the generated markup
        for this component.
    </description>
    <name>lang</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The maximum number of characters that may
        be entered in this field.
    </description>
    <name>maxlength</name>
    <required>false</required>
    <type>int</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus.
    </description>
    <name>onblur</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus
        and its value has been modified since gaining focus.
    </description>
    <name>onchange</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        clicked over this element.
    </description>
    <name>onclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        double clicked over this element.
    </description>
    <name>ondblclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element receives focus.
    </description>
    <name>onfocus</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed down over this element.
    </description>
    <name>onkeydown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed and released over this element.
    </description>
    <name>onkeypress</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        released over this element.
    </description>
    <name>onkeyup</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        pressed down over this element.
    </description>
    <name>onmousedown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved within this element.
    </description>
    <name>onmousemove</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved away from this element.
    </description>
    <name>onmouseout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved onto this element.
    </description>
    <name>onmouseover</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        <![CDATA[Javascript code executed when a pointer button is
        released over this element.]]>
    </description>
    <name>
        onmouseup
    </name>
    <required>
        false
    </required>
    <type>
        java.lang.String
    </type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when text within this
        element is selected by the user.
    </description>
    <name>onselect</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        Flag indicating that this component will prohibit changes by
        the user. The element may receive focus unless it has also
        been disabled. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as readonly="readonly".
    </description>
    <name>readonly</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        The number of characters used to determine
        the width of this field.
    </description>
    <name>size</name>
    <required>false</required>
    <type>int</type>
</attribute>
        <attribute>
    <description>
        CSS style(s) to be applied when this component is rendered.
    </description>
    <name>style</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Space-separated list of CSS style class(es) to be applied when
        this element is rendered. This value must be passed through
        as the "class" attribute on generated markup.
    </description>
    <name>styleClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Position of this element in the tabbing order
        for the current document. This value must be
        an integer between 0 and 32767.
    </description>
    <name>tabindex</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Advisory title information about markup elements generated for this component.
    </description>
    <name>title</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The ValueExpression linking this component to a property in a
        backing bean
    </description>
    <name>binding</name>
    <required>false</required>
    <type>javax.faces.component.UIComponent</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define a posição de apresentação do tooltip.</p>
    <p>Valores possíveis: top, left, bottom, right.</p>
    <p>OBS: aparentemente o tooltip posicionado a esquerda não funciona dentro de divs que definem grids.</p>
    ]]></description>
    <name>tooltipPosition</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <!-- ATRIBUTOS BOOTSTRAP -->
        <attribute>
    <description>Layout do form. Valores possíveis: vertical, inline, horizontal. Valor padrão: vertical.</description>
    <name>formLayout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Define se o label deverá ser exibido ou não</description>
    <name>showLabel</name>
    <required>false</required>
    <type>java.lang.Boolean</type>
</attribute>
        <attribute>
    <description>Tamanho do componente para forms com layout horizontal. Valores: 1 a 12</description>
    <name>inputSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description>Tamanho do label para forms com layout horizontal. Valores: 1 a 12</description>
    <name>labelSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define a posição de apresentação do tooltip.</p>
    <p>Valores possíveis: top, left, bottom, right.</p>
    <p>OBS: aparentemente o tooltip posicionado a esquerda não funciona dentro de divs que definem grids.</p>
    ]]></description>
    <name>tooltipPosition</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Texto de ajuda apresentado no componente e removido quando algo é digitado</description>
    <name>placeholder</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Texto decorativo apresentado à esquerda do componente</description>
    <name>prepend</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Texto decorativo apresentado à direita do componente</description>
    <name>append</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Breve descrição sempre visível logo abaixo do componente</description>
    <name>hint</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define um script javascript que será executado após a renderização do componente.</p>
    ]]></description>
    <name>initScript</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

    </tag>
    <tag>
        <description><![CDATA[
        <p>Renderiza um componente "input" com o "type" igual a "text" com  máscara e validação para número CNARH.</p>
        ]]></description>
        <tag-name>inputTextCNARH</tag-name>
        <component>
            <component-type>neotech.bootstrapfaces.inputTextCNARH</component-type>
            <renderer-type>neotech.bootstrapfaces.renderer.inputText</renderer-type>
        </component>

        <!-- ATRIBUTOS JSF -->
        <attribute>
    <description>
        Converter instance registered with this component.
    </description>
    <name>converter</name>
    <required>false</required>
    <type>javax.faces.convert.Converter</type>
</attribute>

        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the converter message, replacing any message
        that comes from the converter.
    </description>
    <name>converterMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        The component identifier for this component. This value must be
        unique within the closest parent component that is a naming
        container.
    </description>
    <name>id</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this component's value must be
        converted and validated immediately (that is, during
        Apply Request Values phase), rather than waiting
        until Process Validations phase.
    </description>
    <name>immediate</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating whether or not this component should be rendered
        (during Render Response Phase), or processed on any subsequent
        form submit. The default value for this property is true.
    </description>
    <name>rendered</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that the user is required to provide a submitted
        value for this input component.
    </description>
    <name>required</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validation message for the "required"
        facility, if the "required" facility is used.
    </description>
    <name>requiredMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        MethodExpression representing a validator method that will be
        called
        during Process Validations to perform correctness checks on the
        value of this component. The expression must evaluate to a
        public
        method that takes FacesContext, UIComponent, and Object
        parameters,
        with a return type of void.
    </description>
    <name>validator</name>
    <required>false</required>
    <method-signature>void validate(javax.faces.context.FacesContext,
        javax.faces.component.UIComponent, java.lang.Object)
    </method-signature>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validator message, replacing any
        message that comes from the validator.
    </description>
    <name>validatorMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The current value of this component.
    </description>
    <name>value</name>
    <required>false</required>
    <type>java.lang.Object</type>
</attribute>
        <attribute>
    <description>
        &lt;p&gt;
        MethodExpression representing a value change listener method
        that will be notified when a new value has been set for this
        input component. The expression must evaluate to a public
        method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt;
        parameter,
        with a return type of void, &lt;span class="changed_added_2_0"&gt;or
        to a public method that takes no arguments with a return type
        of void. In the latter case, the method has no way of easily
        knowing what the new value is, but this can be useful in cases
        where a notification is needed that "this value
        changed".&lt;/span&gt;
        &lt;/p&gt;
    </description>
    <name>valueChangeListener</name>
    <required>false</required>
    <method-signature>void
        valueChange(javax.faces.event.ValueChangeEvent)
    </method-signature>
</attribute>
        <attribute>
    <description>
        Access key that, when pressed, transfers focus
        to this element.
    </description>
    <name>accesskey</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Alternate textual description of the
        element rendered by this component.
    </description>
    <name>alt</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        If the value of this attribute is "off", render "off" as the
        value
        of the attribute. This indicates that the browser should
        disable its autocomplete feature for this component. This is
        useful for components that perform autocompletion and do not
        want the browser interfering. If this attribute is not set or
        the value
        is "on", render nothing.
    </description>
    <name>autocomplete</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Direction indication for text that does not inherit
        directionality.
        Valid values are "LTR" (left-to-right) and "RTL"
        (right-to-left).
    </description>
    <name>dir</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this element must never receive focus or
        be included in a subsequent submit. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as disabled="disabled".
    </description>
    <name>disabled</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A localized user presentable name for this component.
    </description>
    <name>label</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Code describing the language used in the generated markup
        for this component.
    </description>
    <name>lang</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The maximum number of characters that may
        be entered in this field.
    </description>
    <name>maxlength</name>
    <required>false</required>
    <type>int</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus.
    </description>
    <name>onblur</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus
        and its value has been modified since gaining focus.
    </description>
    <name>onchange</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        clicked over this element.
    </description>
    <name>onclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        double clicked over this element.
    </description>
    <name>ondblclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element receives focus.
    </description>
    <name>onfocus</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed down over this element.
    </description>
    <name>onkeydown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed and released over this element.
    </description>
    <name>onkeypress</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        released over this element.
    </description>
    <name>onkeyup</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        pressed down over this element.
    </description>
    <name>onmousedown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved within this element.
    </description>
    <name>onmousemove</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved away from this element.
    </description>
    <name>onmouseout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved onto this element.
    </description>
    <name>onmouseover</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        <![CDATA[Javascript code executed when a pointer button is
        released over this element.]]>
    </description>
    <name>
        onmouseup
    </name>
    <required>
        false
    </required>
    <type>
        java.lang.String
    </type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when text within this
        element is selected by the user.
    </description>
    <name>onselect</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        Flag indicating that this component will prohibit changes by
        the user. The element may receive focus unless it has also
        been disabled. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as readonly="readonly".
    </description>
    <name>readonly</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        The number of characters used to determine
        the width of this field.
    </description>
    <name>size</name>
    <required>false</required>
    <type>int</type>
</attribute>
        <attribute>
    <description>
        CSS style(s) to be applied when this component is rendered.
    </description>
    <name>style</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Space-separated list of CSS style class(es) to be applied when
        this element is rendered. This value must be passed through
        as the "class" attribute on generated markup.
    </description>
    <name>styleClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Position of this element in the tabbing order
        for the current document. This value must be
        an integer between 0 and 32767.
    </description>
    <name>tabindex</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Advisory title information about markup elements generated for this component.
    </description>
    <name>title</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The ValueExpression linking this component to a property in a
        backing bean
    </description>
    <name>binding</name>
    <required>false</required>
    <type>javax.faces.component.UIComponent</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define a posição de apresentação do tooltip.</p>
    <p>Valores possíveis: top, left, bottom, right.</p>
    <p>OBS: aparentemente o tooltip posicionado a esquerda não funciona dentro de divs que definem grids.</p>
    ]]></description>
    <name>tooltipPosition</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <!-- ATRIBUTOS BOOTSTRAP -->
        <attribute>
    <description>Layout do form. Valores possíveis: vertical, inline, horizontal. Valor padrão: vertical.</description>
    <name>formLayout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Define se o label deverá ser exibido ou não</description>
    <name>showLabel</name>
    <required>false</required>
    <type>java.lang.Boolean</type>
</attribute>
        <attribute>
    <description>Tamanho do componente para forms com layout horizontal. Valores: 1 a 12</description>
    <name>inputSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description>Tamanho do label para forms com layout horizontal. Valores: 1 a 12</description>
    <name>labelSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define a posição de apresentação do tooltip.</p>
    <p>Valores possíveis: top, left, bottom, right.</p>
    <p>OBS: aparentemente o tooltip posicionado a esquerda não funciona dentro de divs que definem grids.</p>
    ]]></description>
    <name>tooltipPosition</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Texto de ajuda apresentado no componente e removido quando algo é digitado</description>
    <name>placeholder</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Texto decorativo apresentado à esquerda do componente</description>
    <name>prepend</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Texto decorativo apresentado à direita do componente</description>
    <name>append</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Breve descrição sempre visível logo abaixo do componente</description>
    <name>hint</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define um script javascript que será executado após a renderização do componente.</p>
    ]]></description>
    <name>initScript</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

    </tag>
    <tag>
        <description><![CDATA[
        <p>Renderiza um componente "input" com o "type" igual a "text" com  máscara para CEP.</p>
        ]]></description>
        <tag-name>inputTextCEP</tag-name>
        <component>
            <component-type>neotech.bootstrapfaces.inputTextCEP</component-type>
            <renderer-type>neotech.bootstrapfaces.renderer.inputText</renderer-type>
        </component>

        <!-- ATRIBUTOS JSF -->
        <attribute>
    <description>
        Converter instance registered with this component.
    </description>
    <name>converter</name>
    <required>false</required>
    <type>javax.faces.convert.Converter</type>
</attribute>

        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the converter message, replacing any message
        that comes from the converter.
    </description>
    <name>converterMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        The component identifier for this component. This value must be
        unique within the closest parent component that is a naming
        container.
    </description>
    <name>id</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this component's value must be
        converted and validated immediately (that is, during
        Apply Request Values phase), rather than waiting
        until Process Validations phase.
    </description>
    <name>immediate</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating whether or not this component should be rendered
        (during Render Response Phase), or processed on any subsequent
        form submit. The default value for this property is true.
    </description>
    <name>rendered</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that the user is required to provide a submitted
        value for this input component.
    </description>
    <name>required</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validation message for the "required"
        facility, if the "required" facility is used.
    </description>
    <name>requiredMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        MethodExpression representing a validator method that will be
        called
        during Process Validations to perform correctness checks on the
        value of this component. The expression must evaluate to a
        public
        method that takes FacesContext, UIComponent, and Object
        parameters,
        with a return type of void.
    </description>
    <name>validator</name>
    <required>false</required>
    <method-signature>void validate(javax.faces.context.FacesContext,
        javax.faces.component.UIComponent, java.lang.Object)
    </method-signature>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validator message, replacing any
        message that comes from the validator.
    </description>
    <name>validatorMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The current value of this component.
    </description>
    <name>value</name>
    <required>false</required>
    <type>java.lang.Object</type>
</attribute>
        <attribute>
    <description>
        &lt;p&gt;
        MethodExpression representing a value change listener method
        that will be notified when a new value has been set for this
        input component. The expression must evaluate to a public
        method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt;
        parameter,
        with a return type of void, &lt;span class="changed_added_2_0"&gt;or
        to a public method that takes no arguments with a return type
        of void. In the latter case, the method has no way of easily
        knowing what the new value is, but this can be useful in cases
        where a notification is needed that "this value
        changed".&lt;/span&gt;
        &lt;/p&gt;
    </description>
    <name>valueChangeListener</name>
    <required>false</required>
    <method-signature>void
        valueChange(javax.faces.event.ValueChangeEvent)
    </method-signature>
</attribute>
        <attribute>
    <description>
        Access key that, when pressed, transfers focus
        to this element.
    </description>
    <name>accesskey</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Alternate textual description of the
        element rendered by this component.
    </description>
    <name>alt</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        If the value of this attribute is "off", render "off" as the
        value
        of the attribute. This indicates that the browser should
        disable its autocomplete feature for this component. This is
        useful for components that perform autocompletion and do not
        want the browser interfering. If this attribute is not set or
        the value
        is "on", render nothing.
    </description>
    <name>autocomplete</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Direction indication for text that does not inherit
        directionality.
        Valid values are "LTR" (left-to-right) and "RTL"
        (right-to-left).
    </description>
    <name>dir</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this element must never receive focus or
        be included in a subsequent submit. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as disabled="disabled".
    </description>
    <name>disabled</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A localized user presentable name for this component.
    </description>
    <name>label</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Code describing the language used in the generated markup
        for this component.
    </description>
    <name>lang</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The maximum number of characters that may
        be entered in this field.
    </description>
    <name>maxlength</name>
    <required>false</required>
    <type>int</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus.
    </description>
    <name>onblur</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus
        and its value has been modified since gaining focus.
    </description>
    <name>onchange</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        clicked over this element.
    </description>
    <name>onclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        double clicked over this element.
    </description>
    <name>ondblclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element receives focus.
    </description>
    <name>onfocus</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed down over this element.
    </description>
    <name>onkeydown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed and released over this element.
    </description>
    <name>onkeypress</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        released over this element.
    </description>
    <name>onkeyup</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        pressed down over this element.
    </description>
    <name>onmousedown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved within this element.
    </description>
    <name>onmousemove</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved away from this element.
    </description>
    <name>onmouseout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved onto this element.
    </description>
    <name>onmouseover</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        <![CDATA[Javascript code executed when a pointer button is
        released over this element.]]>
    </description>
    <name>
        onmouseup
    </name>
    <required>
        false
    </required>
    <type>
        java.lang.String
    </type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when text within this
        element is selected by the user.
    </description>
    <name>onselect</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        Flag indicating that this component will prohibit changes by
        the user. The element may receive focus unless it has also
        been disabled. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as readonly="readonly".
    </description>
    <name>readonly</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        The number of characters used to determine
        the width of this field.
    </description>
    <name>size</name>
    <required>false</required>
    <type>int</type>
</attribute>
        <attribute>
    <description>
        CSS style(s) to be applied when this component is rendered.
    </description>
    <name>style</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Space-separated list of CSS style class(es) to be applied when
        this element is rendered. This value must be passed through
        as the "class" attribute on generated markup.
    </description>
    <name>styleClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Position of this element in the tabbing order
        for the current document. This value must be
        an integer between 0 and 32767.
    </description>
    <name>tabindex</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Advisory title information about markup elements generated for this component.
    </description>
    <name>title</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The ValueExpression linking this component to a property in a
        backing bean
    </description>
    <name>binding</name>
    <required>false</required>
    <type>javax.faces.component.UIComponent</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define a posição de apresentação do tooltip.</p>
    <p>Valores possíveis: top, left, bottom, right.</p>
    <p>OBS: aparentemente o tooltip posicionado a esquerda não funciona dentro de divs que definem grids.</p>
    ]]></description>
    <name>tooltipPosition</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <!-- ATRIBUTOS BOOTSTRAP -->
        <attribute>
    <description>Layout do form. Valores possíveis: vertical, inline, horizontal. Valor padrão: vertical.</description>
    <name>formLayout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Define se o label deverá ser exibido ou não</description>
    <name>showLabel</name>
    <required>false</required>
    <type>java.lang.Boolean</type>
</attribute>
        <attribute>
    <description>Tamanho do componente para forms com layout horizontal. Valores: 1 a 12</description>
    <name>inputSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description>Tamanho do label para forms com layout horizontal. Valores: 1 a 12</description>
    <name>labelSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define a posição de apresentação do tooltip.</p>
    <p>Valores possíveis: top, left, bottom, right.</p>
    <p>OBS: aparentemente o tooltip posicionado a esquerda não funciona dentro de divs que definem grids.</p>
    ]]></description>
    <name>tooltipPosition</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Texto de ajuda apresentado no componente e removido quando algo é digitado</description>
    <name>placeholder</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Texto decorativo apresentado à esquerda do componente</description>
    <name>prepend</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Texto decorativo apresentado à direita do componente</description>
    <name>append</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Breve descrição sempre visível logo abaixo do componente</description>
    <name>hint</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define um script javascript que será executado após a renderização do componente.</p>
    ]]></description>
    <name>initScript</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

    </tag>
    <tag>
        <description><![CDATA[
        <p>Renderiza um componente "input" com o "type" igual a "text" com  validação para e-mail.</p>
        ]]></description>
        <tag-name>inputTextEmail</tag-name>
        <component>
            <component-type>neotech.bootstrapfaces.inputTextEmail</component-type>
            <renderer-type>neotech.bootstrapfaces.renderer.inputText</renderer-type>
        </component>

        <!-- ATRIBUTOS JSF -->
        <attribute>
    <description>
        Converter instance registered with this component.
    </description>
    <name>converter</name>
    <required>false</required>
    <type>javax.faces.convert.Converter</type>
</attribute>

        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the converter message, replacing any message
        that comes from the converter.
    </description>
    <name>converterMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        The component identifier for this component. This value must be
        unique within the closest parent component that is a naming
        container.
    </description>
    <name>id</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this component's value must be
        converted and validated immediately (that is, during
        Apply Request Values phase), rather than waiting
        until Process Validations phase.
    </description>
    <name>immediate</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating whether or not this component should be rendered
        (during Render Response Phase), or processed on any subsequent
        form submit. The default value for this property is true.
    </description>
    <name>rendered</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that the user is required to provide a submitted
        value for this input component.
    </description>
    <name>required</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validation message for the "required"
        facility, if the "required" facility is used.
    </description>
    <name>requiredMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        MethodExpression representing a validator method that will be
        called
        during Process Validations to perform correctness checks on the
        value of this component. The expression must evaluate to a
        public
        method that takes FacesContext, UIComponent, and Object
        parameters,
        with a return type of void.
    </description>
    <name>validator</name>
    <required>false</required>
    <method-signature>void validate(javax.faces.context.FacesContext,
        javax.faces.component.UIComponent, java.lang.Object)
    </method-signature>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validator message, replacing any
        message that comes from the validator.
    </description>
    <name>validatorMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The current value of this component.
    </description>
    <name>value</name>
    <required>false</required>
    <type>java.lang.Object</type>
</attribute>
        <attribute>
    <description>
        &lt;p&gt;
        MethodExpression representing a value change listener method
        that will be notified when a new value has been set for this
        input component. The expression must evaluate to a public
        method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt;
        parameter,
        with a return type of void, &lt;span class="changed_added_2_0"&gt;or
        to a public method that takes no arguments with a return type
        of void. In the latter case, the method has no way of easily
        knowing what the new value is, but this can be useful in cases
        where a notification is needed that "this value
        changed".&lt;/span&gt;
        &lt;/p&gt;
    </description>
    <name>valueChangeListener</name>
    <required>false</required>
    <method-signature>void
        valueChange(javax.faces.event.ValueChangeEvent)
    </method-signature>
</attribute>
        <attribute>
    <description>
        Access key that, when pressed, transfers focus
        to this element.
    </description>
    <name>accesskey</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Alternate textual description of the
        element rendered by this component.
    </description>
    <name>alt</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        If the value of this attribute is "off", render "off" as the
        value
        of the attribute. This indicates that the browser should
        disable its autocomplete feature for this component. This is
        useful for components that perform autocompletion and do not
        want the browser interfering. If this attribute is not set or
        the value
        is "on", render nothing.
    </description>
    <name>autocomplete</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Direction indication for text that does not inherit
        directionality.
        Valid values are "LTR" (left-to-right) and "RTL"
        (right-to-left).
    </description>
    <name>dir</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this element must never receive focus or
        be included in a subsequent submit. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as disabled="disabled".
    </description>
    <name>disabled</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A localized user presentable name for this component.
    </description>
    <name>label</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Code describing the language used in the generated markup
        for this component.
    </description>
    <name>lang</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The maximum number of characters that may
        be entered in this field.
    </description>
    <name>maxlength</name>
    <required>false</required>
    <type>int</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus.
    </description>
    <name>onblur</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus
        and its value has been modified since gaining focus.
    </description>
    <name>onchange</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        clicked over this element.
    </description>
    <name>onclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        double clicked over this element.
    </description>
    <name>ondblclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element receives focus.
    </description>
    <name>onfocus</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed down over this element.
    </description>
    <name>onkeydown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed and released over this element.
    </description>
    <name>onkeypress</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        released over this element.
    </description>
    <name>onkeyup</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        pressed down over this element.
    </description>
    <name>onmousedown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved within this element.
    </description>
    <name>onmousemove</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved away from this element.
    </description>
    <name>onmouseout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved onto this element.
    </description>
    <name>onmouseover</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        <![CDATA[Javascript code executed when a pointer button is
        released over this element.]]>
    </description>
    <name>
        onmouseup
    </name>
    <required>
        false
    </required>
    <type>
        java.lang.String
    </type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when text within this
        element is selected by the user.
    </description>
    <name>onselect</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        Flag indicating that this component will prohibit changes by
        the user. The element may receive focus unless it has also
        been disabled. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as readonly="readonly".
    </description>
    <name>readonly</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        The number of characters used to determine
        the width of this field.
    </description>
    <name>size</name>
    <required>false</required>
    <type>int</type>
</attribute>
        <attribute>
    <description>
        CSS style(s) to be applied when this component is rendered.
    </description>
    <name>style</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Space-separated list of CSS style class(es) to be applied when
        this element is rendered. This value must be passed through
        as the "class" attribute on generated markup.
    </description>
    <name>styleClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Position of this element in the tabbing order
        for the current document. This value must be
        an integer between 0 and 32767.
    </description>
    <name>tabindex</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Advisory title information about markup elements generated for this component.
    </description>
    <name>title</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The ValueExpression linking this component to a property in a
        backing bean
    </description>
    <name>binding</name>
    <required>false</required>
    <type>javax.faces.component.UIComponent</type>
</attribute>

        <!-- ATRIBUTOS BOOTSTRAP -->
        <attribute>
    <description>Layout do form. Valores possíveis: vertical, inline, horizontal. Valor padrão: vertical.</description>
    <name>formLayout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Define se o label deverá ser exibido ou não</description>
    <name>showLabel</name>
    <required>false</required>
    <type>java.lang.Boolean</type>
</attribute>
        <attribute>
    <description>Tamanho do componente para forms com layout horizontal. Valores: 1 a 12</description>
    <name>inputSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description>Tamanho do label para forms com layout horizontal. Valores: 1 a 12</description>
    <name>labelSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define a posição de apresentação do tooltip.</p>
    <p>Valores possíveis: top, left, bottom, right.</p>
    <p>OBS: aparentemente o tooltip posicionado a esquerda não funciona dentro de divs que definem grids.</p>
    ]]></description>
    <name>tooltipPosition</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Texto de ajuda apresentado no componente e removido quando algo é digitado</description>
    <name>placeholder</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Texto decorativo apresentado à direita do componente</description>
    <name>append</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Breve descrição sempre visível logo abaixo do componente</description>
    <name>hint</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define um script javascript que será executado após a renderização do componente.</p>
    ]]></description>
    <name>initScript</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

    </tag>
    <tag>
        <description><![CDATA[
        <p>Campo para envio de arquivos para o servidor.</p>
        ]]></description>
        <tag-name>inputFile</tag-name>
        <component>
            <component-type>neotech.bootstrapfaces.inputFile</component-type>
            <renderer-type>neotech.bootstrapfaces.renderer.inputFile</renderer-type>
        </component>

        <!-- ATRIBUTOS JSF -->
        <attribute>
    <description>
        The component identifier for this component. This value must be
        unique within the closest parent component that is a naming
        container.
    </description>
    <name>id</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this component's value must be
        converted and validated immediately (that is, during
        Apply Request Values phase), rather than waiting
        until Process Validations phase.
    </description>
    <name>immediate</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating whether or not this component should be rendered
        (during Render Response Phase), or processed on any subsequent
        form submit. The default value for this property is true.
    </description>
    <name>rendered</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that the user is required to provide a submitted
        value for this input component.
    </description>
    <name>required</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validation message for the "required"
        facility, if the "required" facility is used.
    </description>
    <name>requiredMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        MethodExpression representing a validator method that will be
        called
        during Process Validations to perform correctness checks on the
        value of this component. The expression must evaluate to a
        public
        method that takes FacesContext, UIComponent, and Object
        parameters,
        with a return type of void.
    </description>
    <name>validator</name>
    <required>false</required>
    <method-signature>void validate(javax.faces.context.FacesContext,
        javax.faces.component.UIComponent, java.lang.Object)
    </method-signature>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validator message, replacing any
        message that comes from the validator.
    </description>
    <name>validatorMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The current value of this component.
    </description>
    <name>value</name>
    <required>false</required>
    <type>java.lang.Object</type>
</attribute>
        <attribute>
    <description>
        &lt;p&gt;
        MethodExpression representing a value change listener method
        that will be notified when a new value has been set for this
        input component. The expression must evaluate to a public
        method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt;
        parameter,
        with a return type of void, &lt;span class="changed_added_2_0"&gt;or
        to a public method that takes no arguments with a return type
        of void. In the latter case, the method has no way of easily
        knowing what the new value is, but this can be useful in cases
        where a notification is needed that "this value
        changed".&lt;/span&gt;
        &lt;/p&gt;
    </description>
    <name>valueChangeListener</name>
    <required>false</required>
    <method-signature>void
        valueChange(javax.faces.event.ValueChangeEvent)
    </method-signature>
</attribute>
        <attribute>
    <description>
        Access key that, when pressed, transfers focus
        to this element.
    </description>
    <name>accesskey</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Alternate textual description of the
        element rendered by this component.
    </description>
    <name>alt</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        If the value of this attribute is "off", render "off" as the
        value
        of the attribute. This indicates that the browser should
        disable its autocomplete feature for this component. This is
        useful for components that perform autocompletion and do not
        want the browser interfering. If this attribute is not set or
        the value
        is "on", render nothing.
    </description>
    <name>autocomplete</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Direction indication for text that does not inherit
        directionality.
        Valid values are "LTR" (left-to-right) and "RTL"
        (right-to-left).
    </description>
    <name>dir</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this element must never receive focus or
        be included in a subsequent submit. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as disabled="disabled".
    </description>
    <name>disabled</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A localized user presentable name for this component.
    </description>
    <name>label</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Code describing the language used in the generated markup
        for this component.
    </description>
    <name>lang</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The maximum number of characters that may
        be entered in this field.
    </description>
    <name>maxlength</name>
    <required>false</required>
    <type>int</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus.
    </description>
    <name>onblur</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus
        and its value has been modified since gaining focus.
    </description>
    <name>onchange</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        clicked over this element.
    </description>
    <name>onclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        double clicked over this element.
    </description>
    <name>ondblclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element receives focus.
    </description>
    <name>onfocus</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed down over this element.
    </description>
    <name>onkeydown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed and released over this element.
    </description>
    <name>onkeypress</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        released over this element.
    </description>
    <name>onkeyup</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        pressed down over this element.
    </description>
    <name>onmousedown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved within this element.
    </description>
    <name>onmousemove</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved away from this element.
    </description>
    <name>onmouseout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved onto this element.
    </description>
    <name>onmouseover</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        <![CDATA[Javascript code executed when a pointer button is
        released over this element.]]>
    </description>
    <name>
        onmouseup
    </name>
    <required>
        false
    </required>
    <type>
        java.lang.String
    </type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this component will prohibit changes by
        the user. The element may receive focus unless it has also
        been disabled. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as readonly="readonly".
    </description>
    <name>readonly</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        The number of characters used to determine
        the width of this field.
    </description>
    <name>size</name>
    <required>false</required>
    <type>int</type>
</attribute>
        <attribute>
    <description>
        CSS style(s) to be applied when this component is rendered.
    </description>
    <name>style</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Space-separated list of CSS style class(es) to be applied when
        this element is rendered. This value must be passed through
        as the "class" attribute on generated markup.
    </description>
    <name>styleClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Position of this element in the tabbing order
        for the current document. This value must be
        an integer between 0 and 32767.
    </description>
    <name>tabindex</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Advisory title information about markup elements generated for this component.
    </description>
    <name>title</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The ValueExpression linking this component to a property in a
        backing bean
    </description>
    <name>binding</name>
    <required>false</required>
    <type>javax.faces.component.UIComponent</type>
</attribute>

        <!-- ATRIBUTOS BOOTSTRAP -->
        <attribute>
    <description>Layout do form. Valores possíveis: vertical, inline, horizontal. Valor padrão: vertical.</description>
    <name>formLayout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Define se o label deverá ser exibido ou não</description>
    <name>showLabel</name>
    <required>false</required>
    <type>java.lang.Boolean</type>
</attribute>
        <attribute>
    <description>Tamanho do componente para forms com layout horizontal. Valores: 1 a 12</description>
    <name>inputSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description>Tamanho do label para forms com layout horizontal. Valores: 1 a 12</description>
    <name>labelSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define a posição de apresentação do tooltip.</p>
    <p>Valores possíveis: top, left, bottom, right.</p>
    <p>OBS: aparentemente o tooltip posicionado a esquerda não funciona dentro de divs que definem grids.</p>
    ]]></description>
    <name>tooltipPosition</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Breve descrição sempre visível logo abaixo do componente</description>
    <name>hint</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define um script javascript que será executado após a renderização do componente.</p>
    ]]></description>
    <name>initScript</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

    </tag>
    <tag>
        <description><![CDATA[
        <p>Renderiza um texto estático com label.</p>
        ]]></description>
        <tag-name>staticText</tag-name>
        <component>
            <component-type>neotech.bootstrapfaces.staticText</component-type>
            <renderer-type>neotech.bootstrapfaces.renderer.staticText</renderer-type>
        </component>

        <attribute>
    <description>
        Converter instance registered with this component.
    </description>
    <name>converter</name>
    <required>false</required>
    <type>javax.faces.convert.Converter</type>
</attribute>

        <attribute>
    <description>
        The component identifier for this component. This value must be
        unique within the closest parent component that is a naming
        container.
    </description>
    <name>id</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating whether or not this component should be rendered
        (during Render Response Phase), or processed on any subsequent
        form submit. The default value for this property is true.
    </description>
    <name>rendered</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        The current value of this component.
    </description>
    <name>value</name>
    <required>false</required>
    <type>java.lang.Object</type>
</attribute>
        <attribute>
    <description>
        Direction indication for text that does not inherit
        directionality.
        Valid values are "LTR" (left-to-right) and "RTL"
        (right-to-left).
    </description>
    <name>dir</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that characters that are sensitive
        in HTML and XML markup must be escaped. This flag
        is set to "true" by default.
    </description>
    <name>escape</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A localized user presentable name for this component.
    </description>
    <name>label</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Code describing the language used in the generated markup
        for this component.
    </description>
    <name>lang</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        CSS style(s) to be applied when this component is rendered.
    </description>
    <name>style</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Space-separated list of CSS style class(es) to be applied when
        this element is rendered. This value must be passed through
        as the "class" attribute on generated markup.
    </description>
    <name>styleClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Advisory title information about markup elements generated for this component.
    </description>
    <name>title</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The ValueExpression linking this component to a property in a
        backing bean
    </description>
    <name>binding</name>
    <required>false</required>
    <type>javax.faces.component.UIComponent</type>
</attribute>

        <!-- ATRIBUTOS BOOTSTRAP -->
        <attribute>
    <description>Define se o label deverá ser exibido ou não</description>
    <name>showLabel</name>
    <required>false</required>
    <type>java.lang.Boolean</type>
</attribute>
        <attribute>
    <description>Layout do form. Valores possíveis: vertical, inline, horizontal. Valor padrão: vertical.</description>
    <name>formLayout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Tamanho do componente para forms com layout horizontal. Valores: 1 a 12</description>
    <name>inputSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description>Tamanho do label para forms com layout horizontal. Valores: 1 a 12</description>
    <name>labelSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description>Breve descrição sempre visível logo abaixo do componente</description>
    <name>hint</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

    </tag>

    <tag>
        <description><![CDATA[
        <p>Decorator para componentes que não possuem as tags e classes do bootstrap.</p>
        ]]></description>
        <tag-name>formControl</tag-name>
        <component>
            <component-type>neotech.bootstrapfaces.formControl</component-type>
            <renderer-type>neotech.bootstrapfaces.renderer.formControl</renderer-type>
        </component>

        <attribute>
    <description>
        The component identifier for this component. This value must be
        unique within the closest parent component that is a naming
        container.
    </description>
    <name>id</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating whether or not this component should be rendered
        (during Render Response Phase), or processed on any subsequent
        form submit. The default value for this property is true.
    </description>
    <name>rendered</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that the user is required to provide a submitted
        value for this input component.
    </description>
    <name>required</name>
    <required>false</required>
    <type>boolean</type>
</attribute>

        <attribute>
    <description>
        Indica o componente de referência para o label.
    </description>
    <name>for</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        A localized user presentable name for this component.
    </description>
    <name>label</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Define se o label deverá ser exibido ou não</description>
    <name>showLabel</name>
    <required>false</required>
    <type>java.lang.Boolean</type>
</attribute>
        <attribute>
    <description>Layout do form. Valores possíveis: vertical, inline, horizontal. Valor padrão: vertical.</description>
    <name>formLayout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Tamanho do componente para forms com layout horizontal. Valores: 1 a 12</description>
    <name>inputSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description>Tamanho do label para forms com layout horizontal. Valores: 1 a 12</description>
    <name>labelSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description>Breve descrição sempre visível logo abaixo do componente</description>
    <name>hint</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

    </tag>

    <tag>
        <description><![CDATA[
        <p>Renderiza um componente "input" com o "type" igual a "text" para entrada de textos maiores.</p>
        ]]></description>
        <tag-name>inputTextArea</tag-name>
        <component>
            <component-type>neotech.bootstrapfaces.inputTextarea</component-type>
            <renderer-type>neotech.bootstrapfaces.renderer.inputTextarea</renderer-type>
        </component>

        <attribute>
    <description>
        Converter instance registered with this component.
    </description>
    <name>converter</name>
    <required>false</required>
    <type>javax.faces.convert.Converter</type>
</attribute>

        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the converter message, replacing any message
        that comes from the converter.
    </description>
    <name>converterMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        The component identifier for this component. This value must be
        unique within the closest parent component that is a naming
        container.
    </description>
    <name>id</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this component's value must be
        converted and validated immediately (that is, during
        Apply Request Values phase), rather than waiting
        until Process Validations phase.
    </description>
    <name>immediate</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating whether or not this component should be rendered
        (during Render Response Phase), or processed on any subsequent
        form submit. The default value for this property is true.
    </description>
    <name>rendered</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that the user is required to provide a submitted
        value for this input component.
    </description>
    <name>required</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validation message for the "required"
        facility, if the "required" facility is used.
    </description>
    <name>requiredMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        MethodExpression representing a validator method that will be
        called
        during Process Validations to perform correctness checks on the
        value of this component. The expression must evaluate to a
        public
        method that takes FacesContext, UIComponent, and Object
        parameters,
        with a return type of void.
    </description>
    <name>validator</name>
    <required>false</required>
    <method-signature>void validate(javax.faces.context.FacesContext,
        javax.faces.component.UIComponent, java.lang.Object)
    </method-signature>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validator message, replacing any
        message that comes from the validator.
    </description>
    <name>validatorMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The current value of this component.
    </description>
    <name>value</name>
    <required>false</required>
    <type>java.lang.Object</type>
</attribute>
        <attribute>
    <description>
        &lt;p&gt;
        MethodExpression representing a value change listener method
        that will be notified when a new value has been set for this
        input component. The expression must evaluate to a public
        method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt;
        parameter,
        with a return type of void, &lt;span class="changed_added_2_0"&gt;or
        to a public method that takes no arguments with a return type
        of void. In the latter case, the method has no way of easily
        knowing what the new value is, but this can be useful in cases
        where a notification is needed that "this value
        changed".&lt;/span&gt;
        &lt;/p&gt;
    </description>
    <name>valueChangeListener</name>
    <required>false</required>
    <method-signature>void
        valueChange(javax.faces.event.ValueChangeEvent)
    </method-signature>
</attribute>
        <attribute>
    <description>
        Access key that, when pressed, transfers focus
        to this element.
    </description>
    <name>accesskey</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Direction indication for text that does not inherit
        directionality.
        Valid values are "LTR" (left-to-right) and "RTL"
        (right-to-left).
    </description>
    <name>dir</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this element must never receive focus or
        be included in a subsequent submit. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as disabled="disabled".
    </description>
    <name>disabled</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A localized user presentable name for this component.
    </description>
    <name>label</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Code describing the language used in the generated markup
        for this component.
    </description>
    <name>lang</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus.
    </description>
    <name>onblur</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus
        and its value has been modified since gaining focus.
    </description>
    <name>onchange</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        clicked over this element.
    </description>
    <name>onclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        double clicked over this element.
    </description>
    <name>ondblclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element receives focus.
    </description>
    <name>onfocus</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed down over this element.
    </description>
    <name>onkeydown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed and released over this element.
    </description>
    <name>onkeypress</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        released over this element.
    </description>
    <name>onkeyup</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        pressed down over this element.
    </description>
    <name>onmousedown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved within this element.
    </description>
    <name>onmousemove</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved away from this element.
    </description>
    <name>onmouseout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved onto this element.
    </description>
    <name>onmouseover</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        <![CDATA[Javascript code executed when a pointer button is
        released over this element.]]>
    </description>
    <name>
        onmouseup
    </name>
    <required>
        false
    </required>
    <type>
        java.lang.String
    </type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when text within this
        element is selected by the user.
    </description>
    <name>onselect</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        Flag indicating that this component will prohibit changes by
        the user. The element may receive focus unless it has also
        been disabled. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as readonly="readonly".
    </description>
    <name>readonly</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>The number of rows to be displayed.</description>
    <name>rows</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>

        <attribute>
    <description>
        CSS style(s) to be applied when this component is rendered.
    </description>
    <name>style</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Space-separated list of CSS style class(es) to be applied when
        this element is rendered. This value must be passed through
        as the "class" attribute on generated markup.
    </description>
    <name>styleClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Position of this element in the tabbing order
        for the current document. This value must be
        an integer between 0 and 32767.
    </description>
    <name>tabindex</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Advisory title information about markup elements generated for this component.
    </description>
    <name>title</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The ValueExpression linking this component to a property in a
        backing bean
    </description>
    <name>binding</name>
    <required>false</required>
    <type>javax.faces.component.UIComponent</type>
</attribute>

        <!-- ATRIBUTOS BOOTSTRAP -->
        <attribute>
    <description>Define se o label deverá ser exibido ou não</description>
    <name>showLabel</name>
    <required>false</required>
    <type>java.lang.Boolean</type>
</attribute>
        <attribute>
    <description>Layout do form. Valores possíveis: vertical, inline, horizontal. Valor padrão: vertical.</description>
    <name>formLayout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Tamanho do componente para forms com layout horizontal. Valores: 1 a 12</description>
    <name>inputSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description>Tamanho do label para forms com layout horizontal. Valores: 1 a 12</description>
    <name>labelSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description>Breve descrição sempre visível logo abaixo do componente</description>
    <name>hint</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define a posição de apresentação do tooltip.</p>
    <p>Valores possíveis: top, left, bottom, right.</p>
    <p>OBS: aparentemente o tooltip posicionado a esquerda não funciona dentro de divs que definem grids.</p>
    ]]></description>
    <name>tooltipPosition</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Texto de ajuda apresentado no componente e removido quando algo é digitado</description>
    <name>placeholder</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define um script javascript que será executado após a renderização do componente.</p>
    ]]></description>
    <name>initScript</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

    </tag>

    <tag>
        <description><![CDATA[
        <p>Componente para entrada de valores com máscara de telefone. Inclui máscara para telefones no padrão brasileiro (XX) XXXXX-XXXX.</p>
        ]]></description>
        <tag-name>inputTextPhone</tag-name>
        <component>
            <component-type>neotech.bootstrapfaces.inputTextPhone</component-type>
            <renderer-type>neotech.bootstrapfaces.renderer.inputText</renderer-type>
        </component>

        <!-- ATRIBUTOS JSF -->
        <attribute>
    <description>
        Converter instance registered with this component.
    </description>
    <name>converter</name>
    <required>false</required>
    <type>javax.faces.convert.Converter</type>
</attribute>

        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the converter message, replacing any message
        that comes from the converter.
    </description>
    <name>converterMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        The component identifier for this component. This value must be
        unique within the closest parent component that is a naming
        container.
    </description>
    <name>id</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this component's value must be
        converted and validated immediately (that is, during
        Apply Request Values phase), rather than waiting
        until Process Validations phase.
    </description>
    <name>immediate</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating whether or not this component should be rendered
        (during Render Response Phase), or processed on any subsequent
        form submit. The default value for this property is true.
    </description>
    <name>rendered</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that the user is required to provide a submitted
        value for this input component.
    </description>
    <name>required</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validation message for the "required"
        facility, if the "required" facility is used.
    </description>
    <name>requiredMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        MethodExpression representing a validator method that will be
        called
        during Process Validations to perform correctness checks on the
        value of this component. The expression must evaluate to a
        public
        method that takes FacesContext, UIComponent, and Object
        parameters,
        with a return type of void.
    </description>
    <name>validator</name>
    <required>false</required>
    <method-signature>void validate(javax.faces.context.FacesContext,
        javax.faces.component.UIComponent, java.lang.Object)
    </method-signature>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validator message, replacing any
        message that comes from the validator.
    </description>
    <name>validatorMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The current value of this component.
    </description>
    <name>value</name>
    <required>false</required>
    <type>java.lang.Object</type>
</attribute>
        <attribute>
    <description>
        &lt;p&gt;
        MethodExpression representing a value change listener method
        that will be notified when a new value has been set for this
        input component. The expression must evaluate to a public
        method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt;
        parameter,
        with a return type of void, &lt;span class="changed_added_2_0"&gt;or
        to a public method that takes no arguments with a return type
        of void. In the latter case, the method has no way of easily
        knowing what the new value is, but this can be useful in cases
        where a notification is needed that "this value
        changed".&lt;/span&gt;
        &lt;/p&gt;
    </description>
    <name>valueChangeListener</name>
    <required>false</required>
    <method-signature>void
        valueChange(javax.faces.event.ValueChangeEvent)
    </method-signature>
</attribute>
        <attribute>
    <description>
        Access key that, when pressed, transfers focus
        to this element.
    </description>
    <name>accesskey</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Alternate textual description of the
        element rendered by this component.
    </description>
    <name>alt</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        If the value of this attribute is "off", render "off" as the
        value
        of the attribute. This indicates that the browser should
        disable its autocomplete feature for this component. This is
        useful for components that perform autocompletion and do not
        want the browser interfering. If this attribute is not set or
        the value
        is "on", render nothing.
    </description>
    <name>autocomplete</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Direction indication for text that does not inherit
        directionality.
        Valid values are "LTR" (left-to-right) and "RTL"
        (right-to-left).
    </description>
    <name>dir</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this element must never receive focus or
        be included in a subsequent submit. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as disabled="disabled".
    </description>
    <name>disabled</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A localized user presentable name for this component.
    </description>
    <name>label</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Code describing the language used in the generated markup
        for this component.
    </description>
    <name>lang</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The maximum number of characters that may
        be entered in this field.
    </description>
    <name>maxlength</name>
    <required>false</required>
    <type>int</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus.
    </description>
    <name>onblur</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus
        and its value has been modified since gaining focus.
    </description>
    <name>onchange</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        clicked over this element.
    </description>
    <name>onclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        double clicked over this element.
    </description>
    <name>ondblclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element receives focus.
    </description>
    <name>onfocus</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed down over this element.
    </description>
    <name>onkeydown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed and released over this element.
    </description>
    <name>onkeypress</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        released over this element.
    </description>
    <name>onkeyup</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        pressed down over this element.
    </description>
    <name>onmousedown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved within this element.
    </description>
    <name>onmousemove</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved away from this element.
    </description>
    <name>onmouseout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved onto this element.
    </description>
    <name>onmouseover</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        <![CDATA[Javascript code executed when a pointer button is
        released over this element.]]>
    </description>
    <name>
        onmouseup
    </name>
    <required>
        false
    </required>
    <type>
        java.lang.String
    </type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when text within this
        element is selected by the user.
    </description>
    <name>onselect</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        Flag indicating that this component will prohibit changes by
        the user. The element may receive focus unless it has also
        been disabled. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as readonly="readonly".
    </description>
    <name>readonly</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        The number of characters used to determine
        the width of this field.
    </description>
    <name>size</name>
    <required>false</required>
    <type>int</type>
</attribute>
        <attribute>
    <description>
        CSS style(s) to be applied when this component is rendered.
    </description>
    <name>style</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Space-separated list of CSS style class(es) to be applied when
        this element is rendered. This value must be passed through
        as the "class" attribute on generated markup.
    </description>
    <name>styleClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Position of this element in the tabbing order
        for the current document. This value must be
        an integer between 0 and 32767.
    </description>
    <name>tabindex</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Advisory title information about markup elements generated for this component.
    </description>
    <name>title</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The ValueExpression linking this component to a property in a
        backing bean
    </description>
    <name>binding</name>
    <required>false</required>
    <type>javax.faces.component.UIComponent</type>
</attribute>

        <!-- ATRIBUTOS BOOTSTRAP -->
        <attribute>
    <description>Layout do form. Valores possíveis: vertical, inline, horizontal. Valor padrão: vertical.</description>
    <name>formLayout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Define se o label deverá ser exibido ou não</description>
    <name>showLabel</name>
    <required>false</required>
    <type>java.lang.Boolean</type>
</attribute>
        <attribute>
    <description>Tamanho do componente para forms com layout horizontal. Valores: 1 a 12</description>
    <name>inputSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description>Tamanho do label para forms com layout horizontal. Valores: 1 a 12</description>
    <name>labelSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define a posição de apresentação do tooltip.</p>
    <p>Valores possíveis: top, left, bottom, right.</p>
    <p>OBS: aparentemente o tooltip posicionado a esquerda não funciona dentro de divs que definem grids.</p>
    ]]></description>
    <name>tooltipPosition</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Texto de ajuda apresentado no componente e removido quando algo é digitado</description>
    <name>placeholder</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Texto decorativo apresentado à esquerda do componente</description>
    <name>prepend</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Texto decorativo apresentado à direita do componente</description>
    <name>append</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Breve descrição sempre visível logo abaixo do componente</description>
    <name>hint</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define um script javascript que será executado após a renderização do componente.</p>
    ]]></description>
    <name>initScript</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

    </tag>
    <tag>
        <description><![CDATA[
        <p>Renderiza um componente "input" com o "type" igual a "text" para entrada de datas.</p>
        ]]></description>
        <tag-name>inputTextDate</tag-name>
        <component>
            <component-type>neotech.bootstrapfaces.inputTextDate</component-type>
            <renderer-type>neotech.bootstrapfaces.renderer.inputText</renderer-type>
        </component>

        <!-- ATRIBUTOS JSF -->
        <attribute>
    <description>
        Formato de Data para o componente
    </description>
    <name>format</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Converter instance registered with this component.
    </description>
    <name>converter</name>
    <required>false</required>
    <type>javax.faces.convert.Converter</type>
</attribute>

        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the converter message, replacing any message
        that comes from the converter.
    </description>
    <name>converterMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        The component identifier for this component. This value must be
        unique within the closest parent component that is a naming
        container.
    </description>
    <name>id</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this component's value must be
        converted and validated immediately (that is, during
        Apply Request Values phase), rather than waiting
        until Process Validations phase.
    </description>
    <name>immediate</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating whether or not this component should be rendered
        (during Render Response Phase), or processed on any subsequent
        form submit. The default value for this property is true.
    </description>
    <name>rendered</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that the user is required to provide a submitted
        value for this input component.
    </description>
    <name>required</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validation message for the "required"
        facility, if the "required" facility is used.
    </description>
    <name>requiredMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        MethodExpression representing a validator method that will be
        called
        during Process Validations to perform correctness checks on the
        value of this component. The expression must evaluate to a
        public
        method that takes FacesContext, UIComponent, and Object
        parameters,
        with a return type of void.
    </description>
    <name>validator</name>
    <required>false</required>
    <method-signature>void validate(javax.faces.context.FacesContext,
        javax.faces.component.UIComponent, java.lang.Object)
    </method-signature>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validator message, replacing any
        message that comes from the validator.
    </description>
    <name>validatorMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The current value of this component.
    </description>
    <name>value</name>
    <required>false</required>
    <type>java.lang.Object</type>
</attribute>
        <attribute>
    <description>
        &lt;p&gt;
        MethodExpression representing a value change listener method
        that will be notified when a new value has been set for this
        input component. The expression must evaluate to a public
        method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt;
        parameter,
        with a return type of void, &lt;span class="changed_added_2_0"&gt;or
        to a public method that takes no arguments with a return type
        of void. In the latter case, the method has no way of easily
        knowing what the new value is, but this can be useful in cases
        where a notification is needed that "this value
        changed".&lt;/span&gt;
        &lt;/p&gt;
    </description>
    <name>valueChangeListener</name>
    <required>false</required>
    <method-signature>void
        valueChange(javax.faces.event.ValueChangeEvent)
    </method-signature>
</attribute>
        <attribute>
    <description>
        Access key that, when pressed, transfers focus
        to this element.
    </description>
    <name>accesskey</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Alternate textual description of the
        element rendered by this component.
    </description>
    <name>alt</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        If the value of this attribute is "off", render "off" as the
        value
        of the attribute. This indicates that the browser should
        disable its autocomplete feature for this component. This is
        useful for components that perform autocompletion and do not
        want the browser interfering. If this attribute is not set or
        the value
        is "on", render nothing.
    </description>
    <name>autocomplete</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Direction indication for text that does not inherit
        directionality.
        Valid values are "LTR" (left-to-right) and "RTL"
        (right-to-left).
    </description>
    <name>dir</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this element must never receive focus or
        be included in a subsequent submit. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as disabled="disabled".
    </description>
    <name>disabled</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A localized user presentable name for this component.
    </description>
    <name>label</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Code describing the language used in the generated markup
        for this component.
    </description>
    <name>lang</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The maximum number of characters that may
        be entered in this field.
    </description>
    <name>maxlength</name>
    <required>false</required>
    <type>int</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus.
    </description>
    <name>onblur</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus
        and its value has been modified since gaining focus.
    </description>
    <name>onchange</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        clicked over this element.
    </description>
    <name>onclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        double clicked over this element.
    </description>
    <name>ondblclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element receives focus.
    </description>
    <name>onfocus</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed down over this element.
    </description>
    <name>onkeydown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed and released over this element.
    </description>
    <name>onkeypress</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        released over this element.
    </description>
    <name>onkeyup</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        pressed down over this element.
    </description>
    <name>onmousedown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved within this element.
    </description>
    <name>onmousemove</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved away from this element.
    </description>
    <name>onmouseout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved onto this element.
    </description>
    <name>onmouseover</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        <![CDATA[Javascript code executed when a pointer button is
        released over this element.]]>
    </description>
    <name>
        onmouseup
    </name>
    <required>
        false
    </required>
    <type>
        java.lang.String
    </type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when text within this
        element is selected by the user.
    </description>
    <name>onselect</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        Flag indicating that this component will prohibit changes by
        the user. The element may receive focus unless it has also
        been disabled. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as readonly="readonly".
    </description>
    <name>readonly</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        The number of characters used to determine
        the width of this field.
    </description>
    <name>size</name>
    <required>false</required>
    <type>int</type>
</attribute>
        <attribute>
    <description>
        CSS style(s) to be applied when this component is rendered.
    </description>
    <name>style</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Space-separated list of CSS style class(es) to be applied when
        this element is rendered. This value must be passed through
        as the "class" attribute on generated markup.
    </description>
    <name>styleClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Position of this element in the tabbing order
        for the current document. This value must be
        an integer between 0 and 32767.
    </description>
    <name>tabindex</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Advisory title information about markup elements generated for this component.
    </description>
    <name>title</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The ValueExpression linking this component to a property in a
        backing bean
    </description>
    <name>binding</name>
    <required>false</required>
    <type>javax.faces.component.UIComponent</type>
</attribute>

        <!-- ATRIBUTOS BOOTSTRAP -->
        <attribute>
    <description>Layout do form. Valores possíveis: vertical, inline, horizontal. Valor padrão: vertical.</description>
    <name>formLayout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Define se o label deverá ser exibido ou não</description>
    <name>showLabel</name>
    <required>false</required>
    <type>java.lang.Boolean</type>
</attribute>
        <attribute>
    <description>Tamanho do componente para forms com layout horizontal. Valores: 1 a 12</description>
    <name>inputSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description>Tamanho do label para forms com layout horizontal. Valores: 1 a 12</description>
    <name>labelSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define a posição de apresentação do tooltip.</p>
    <p>Valores possíveis: top, left, bottom, right.</p>
    <p>OBS: aparentemente o tooltip posicionado a esquerda não funciona dentro de divs que definem grids.</p>
    ]]></description>
    <name>tooltipPosition</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Texto de ajuda apresentado no componente e removido quando algo é digitado</description>
    <name>placeholder</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Texto decorativo apresentado à esquerda do componente</description>
    <name>prepend</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Breve descrição sempre visível logo abaixo do componente</description>
    <name>hint</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define um script javascript que será executado após a renderização do componente.</p>
    ]]></description>
    <name>initScript</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Indica o formato inicial do calendário. Valor padrão: month. Valores possíveis: month, year, decade.
    </description>
    <name>startView</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>


    </tag>


    <tag>
        <description><![CDATA[
        <p>Renderiza um componente "input" com o "type" igual a "text" para entrada de valores numéricos.</p>
        ]]></description>
        <tag-name>inputTextNumber</tag-name>
        <component>
            <component-type>neotech.bootstrapfaces.inputTextNumber</component-type>
            <renderer-type>neotech.bootstrapfaces.renderer.inputText</renderer-type>
        </component>

        <!-- ATRIBUTOS JSF -->
        <attribute>
    <description>
        Converter instance registered with this component.
    </description>
    <name>converter</name>
    <required>false</required>
    <type>javax.faces.convert.Converter</type>
</attribute>

        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the converter message, replacing any message
        that comes from the converter.
    </description>
    <name>converterMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        The component identifier for this component. This value must be
        unique within the closest parent component that is a naming
        container.
    </description>
    <name>id</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this component's value must be
        converted and validated immediately (that is, during
        Apply Request Values phase), rather than waiting
        until Process Validations phase.
    </description>
    <name>immediate</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating whether or not this component should be rendered
        (during Render Response Phase), or processed on any subsequent
        form submit. The default value for this property is true.
    </description>
    <name>rendered</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that the user is required to provide a submitted
        value for this input component.
    </description>
    <name>required</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validation message for the "required"
        facility, if the "required" facility is used.
    </description>
    <name>requiredMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        MethodExpression representing a validator method that will be
        called
        during Process Validations to perform correctness checks on the
        value of this component. The expression must evaluate to a
        public
        method that takes FacesContext, UIComponent, and Object
        parameters,
        with a return type of void.
    </description>
    <name>validator</name>
    <required>false</required>
    <method-signature>void validate(javax.faces.context.FacesContext,
        javax.faces.component.UIComponent, java.lang.Object)
    </method-signature>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validator message, replacing any
        message that comes from the validator.
    </description>
    <name>validatorMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The current value of this component.
    </description>
    <name>value</name>
    <required>false</required>
    <type>java.lang.Object</type>
</attribute>
        <attribute>
    <description>
        &lt;p&gt;
        MethodExpression representing a value change listener method
        that will be notified when a new value has been set for this
        input component. The expression must evaluate to a public
        method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt;
        parameter,
        with a return type of void, &lt;span class="changed_added_2_0"&gt;or
        to a public method that takes no arguments with a return type
        of void. In the latter case, the method has no way of easily
        knowing what the new value is, but this can be useful in cases
        where a notification is needed that "this value
        changed".&lt;/span&gt;
        &lt;/p&gt;
    </description>
    <name>valueChangeListener</name>
    <required>false</required>
    <method-signature>void
        valueChange(javax.faces.event.ValueChangeEvent)
    </method-signature>
</attribute>
        <attribute>
    <description>
        Access key that, when pressed, transfers focus
        to this element.
    </description>
    <name>accesskey</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Alternate textual description of the
        element rendered by this component.
    </description>
    <name>alt</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        If the value of this attribute is "off", render "off" as the
        value
        of the attribute. This indicates that the browser should
        disable its autocomplete feature for this component. This is
        useful for components that perform autocompletion and do not
        want the browser interfering. If this attribute is not set or
        the value
        is "on", render nothing.
    </description>
    <name>autocomplete</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Direction indication for text that does not inherit
        directionality.
        Valid values are "LTR" (left-to-right) and "RTL"
        (right-to-left).
    </description>
    <name>dir</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this element must never receive focus or
        be included in a subsequent submit. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as disabled="disabled".
    </description>
    <name>disabled</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A localized user presentable name for this component.
    </description>
    <name>label</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Code describing the language used in the generated markup
        for this component.
    </description>
    <name>lang</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The maximum number of characters that may
        be entered in this field.
    </description>
    <name>maxlength</name>
    <required>false</required>
    <type>int</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus.
    </description>
    <name>onblur</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus
        and its value has been modified since gaining focus.
    </description>
    <name>onchange</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        clicked over this element.
    </description>
    <name>onclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        double clicked over this element.
    </description>
    <name>ondblclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element receives focus.
    </description>
    <name>onfocus</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed down over this element.
    </description>
    <name>onkeydown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed and released over this element.
    </description>
    <name>onkeypress</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        released over this element.
    </description>
    <name>onkeyup</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        pressed down over this element.
    </description>
    <name>onmousedown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved within this element.
    </description>
    <name>onmousemove</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved away from this element.
    </description>
    <name>onmouseout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved onto this element.
    </description>
    <name>onmouseover</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        <![CDATA[Javascript code executed when a pointer button is
        released over this element.]]>
    </description>
    <name>
        onmouseup
    </name>
    <required>
        false
    </required>
    <type>
        java.lang.String
    </type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when text within this
        element is selected by the user.
    </description>
    <name>onselect</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        Flag indicating that this component will prohibit changes by
        the user. The element may receive focus unless it has also
        been disabled. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as readonly="readonly".
    </description>
    <name>readonly</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        The number of characters used to determine
        the width of this field.
    </description>
    <name>size</name>
    <required>false</required>
    <type>int</type>
</attribute>
        <attribute>
    <description>
        CSS style(s) to be applied when this component is rendered.
    </description>
    <name>style</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Space-separated list of CSS style class(es) to be applied when
        this element is rendered. This value must be passed through
        as the "class" attribute on generated markup.
    </description>
    <name>styleClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Position of this element in the tabbing order
        for the current document. This value must be
        an integer between 0 and 32767.
    </description>
    <name>tabindex</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Advisory title information about markup elements generated for this component.
    </description>
    <name>title</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The ValueExpression linking this component to a property in a
        backing bean
    </description>
    <name>binding</name>
    <required>false</required>
    <type>javax.faces.component.UIComponent</type>
</attribute>

        <!-- ATRIBUTOS BOOTSTRAP -->
        <attribute>
    <description>Layout do form. Valores possíveis: vertical, inline, horizontal. Valor padrão: vertical.</description>
    <name>formLayout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Define se o label deverá ser exibido ou não</description>
    <name>showLabel</name>
    <required>false</required>
    <type>java.lang.Boolean</type>
</attribute>
        <attribute>
    <description>Tamanho do componente para forms com layout horizontal. Valores: 1 a 12</description>
    <name>inputSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description>Tamanho do label para forms com layout horizontal. Valores: 1 a 12</description>
    <name>labelSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define a posição de apresentação do tooltip.</p>
    <p>Valores possíveis: top, left, bottom, right.</p>
    <p>OBS: aparentemente o tooltip posicionado a esquerda não funciona dentro de divs que definem grids.</p>
    ]]></description>
    <name>tooltipPosition</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Texto de ajuda apresentado no componente e removido quando algo é digitado</description>
    <name>placeholder</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Texto decorativo apresentado à esquerda do componente</description>
    <name>prepend</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Texto decorativo apresentado à direita do componente</description>
    <name>append</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Breve descrição sempre visível logo abaixo do componente</description>
    <name>hint</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define um script javascript que será executado após a renderização do componente.</p>
    ]]></description>
    <name>initScript</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Define o número de casas decimais após a vírgula. Valor padrão: 2</description>
    <name>minFractionDigits</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>

        <attribute>
    <description>Define o caracter de separação dos milhares. Valor padrão: "."</description>
    <name>thousandsSeparator</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>Define o caracter de separação da parte decimal. Valor padrão: ","</description>
    <name>decimalSeparator</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

    </tag>

    <tag>
        <description><![CDATA[
            &lt;p&gt;Renders an HTML "input" element of type "checkbox".&lt;/p&gt;
            &lt;p&gt;Decode Behavior&lt;/p&gt;
            &lt;ul&gt;
            &lt;p&gt;Obtain the &lt;code&gt;Map&lt;/code&gt; from the
            "requestParameterMap"
            property of the &lt;code&gt;ExternalContext&lt;/code&gt;. If there
            is no
            entry in the &lt;code&gt;Map&lt;/code&gt; for the "clientId" of this
            component, pass "false" to the &lt;code&gt;setSubmittedValue()&lt;/code&gt;
            method of the component, which must be an instance of
            &lt;code&gt;EditableValueHolder&lt;/code&gt;. If there is an entry,
            and its
            value is equal, ignoring case and without quotes, to any of the
            Strings: "on", "yes" or "true" pass true to the
            &lt;code&gt;setSubmittedValue()&lt;/code&gt; method of the
            component.&lt;/p&gt;
            &lt;/ul&gt;
            &lt;p&gt;Encode Behavior&lt;/p&gt;
            &lt;ul&gt;
            &lt;p&gt;
            Render the clientId of the component as the value of the "name"
            attribute. If the current value of the component is "true",
            output the "checked" attribute (must be rendered as
            checked="checked").
            If the "styleClass" attribute is specified, render its value as the
            value
            of the "class" attribute.&lt;/p&gt; &lt;/ul&gt;
        ]]></description>
        <tag-name>selectBooleanCheckbox</tag-name>
        <component>
            <component-type>neotech.bootstrapfaces.selectBooleanCheckbox</component-type>
            <renderer-type>neotech.bootstrapfaces.renderer.selectBooleanCheckbox</renderer-type>
        </component>

        <attribute>
    <description>
        Converter instance registered with this component.
    </description>
    <name>converter</name>
    <required>false</required>
    <type>javax.faces.convert.Converter</type>
</attribute>

        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the converter message, replacing any message
        that comes from the converter.
    </description>
    <name>converterMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        The component identifier for this component. This value must be
        unique within the closest parent component that is a naming
        container.
    </description>
    <name>id</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this component's value must be
        converted and validated immediately (that is, during
        Apply Request Values phase), rather than waiting
        until Process Validations phase.
    </description>
    <name>immediate</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating whether or not this component should be rendered
        (during Render Response Phase), or processed on any subsequent
        form submit. The default value for this property is true.
    </description>
    <name>rendered</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that the user is required to provide a submitted
        value for this input component.
    </description>
    <name>required</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validation message for the "required"
        facility, if the "required" facility is used.
    </description>
    <name>requiredMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        MethodExpression representing a validator method that will be
        called
        during Process Validations to perform correctness checks on the
        value of this component. The expression must evaluate to a
        public
        method that takes FacesContext, UIComponent, and Object
        parameters,
        with a return type of void.
    </description>
    <name>validator</name>
    <required>false</required>
    <method-signature>void validate(javax.faces.context.FacesContext,
        javax.faces.component.UIComponent, java.lang.Object)
    </method-signature>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validator message, replacing any
        message that comes from the validator.
    </description>
    <name>validatorMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The current value of this component.
    </description>
    <name>value</name>
    <required>false</required>
    <type>java.lang.Object</type>
</attribute>
        <attribute>
    <description>
        &lt;p&gt;
        MethodExpression representing a value change listener method
        that will be notified when a new value has been set for this
        input component. The expression must evaluate to a public
        method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt;
        parameter,
        with a return type of void, &lt;span class="changed_added_2_0"&gt;or
        to a public method that takes no arguments with a return type
        of void. In the latter case, the method has no way of easily
        knowing what the new value is, but this can be useful in cases
        where a notification is needed that "this value
        changed".&lt;/span&gt;
        &lt;/p&gt;
    </description>
    <name>valueChangeListener</name>
    <required>false</required>
    <method-signature>void
        valueChange(javax.faces.event.ValueChangeEvent)
    </method-signature>
</attribute>
        <attribute>
    <description>
        Access key that, when pressed, transfers focus
        to this element.
    </description>
    <name>accesskey</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Direction indication for text that does not inherit
        directionality.
        Valid values are "LTR" (left-to-right) and "RTL"
        (right-to-left).
    </description>
    <name>dir</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this element must never receive focus or
        be included in a subsequent submit. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as disabled="disabled".
    </description>
    <name>disabled</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A localized user presentable name for this component.
    </description>
    <name>label</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Code describing the language used in the generated markup
        for this component.
    </description>
    <name>lang</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus.
    </description>
    <name>onblur</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus
        and its value has been modified since gaining focus.
    </description>
    <name>onchange</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        clicked over this element.
    </description>
    <name>onclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        double clicked over this element.
    </description>
    <name>ondblclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element receives focus.
    </description>
    <name>onfocus</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed down over this element.
    </description>
    <name>onkeydown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed and released over this element.
    </description>
    <name>onkeypress</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        released over this element.
    </description>
    <name>onkeyup</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        pressed down over this element.
    </description>
    <name>onmousedown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved within this element.
    </description>
    <name>onmousemove</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved away from this element.
    </description>
    <name>onmouseout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved onto this element.
    </description>
    <name>onmouseover</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        <![CDATA[Javascript code executed when a pointer button is
        released over this element.]]>
    </description>
    <name>
        onmouseup
    </name>
    <required>
        false
    </required>
    <type>
        java.lang.String
    </type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when text within this
        element is selected by the user.
    </description>
    <name>onselect</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        Flag indicating that this component will prohibit changes by
        the user. The element may receive focus unless it has also
        been disabled. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as readonly="readonly".
    </description>
    <name>readonly</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        CSS style(s) to be applied when this component is rendered.
    </description>
    <name>style</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Space-separated list of CSS style class(es) to be applied when
        this element is rendered. This value must be passed through
        as the "class" attribute on generated markup.
    </description>
    <name>styleClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Position of this element in the tabbing order
        for the current document. This value must be
        an integer between 0 and 32767.
    </description>
    <name>tabindex</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Advisory title information about markup elements generated for this component.
    </description>
    <name>title</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The ValueExpression linking this component to a property in a
        backing bean
    </description>
    <name>binding</name>
    <required>false</required>
    <type>javax.faces.component.UIComponent</type>
</attribute>

        <!-- ATRIBUTOS BOOTSTRAP -->
        <attribute>
    <description>Define se o label deverá ser exibido ou não</description>
    <name>showLabel</name>
    <required>false</required>
    <type>java.lang.Boolean</type>
</attribute>
        <attribute>
    <description>Layout do form. Valores possíveis: vertical, inline, horizontal. Valor padrão: vertical.</description>
    <name>formLayout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Tamanho do componente para forms com layout horizontal. Valores: 1 a 12</description>
    <name>inputSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description>Tamanho do label para forms com layout horizontal. Valores: 1 a 12</description>
    <name>labelSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description>Breve descrição sempre visível logo abaixo do componente</description>
    <name>hint</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define a posição de apresentação do tooltip.</p>
    <p>Valores possíveis: top, left, bottom, right.</p>
    <p>OBS: aparentemente o tooltip posicionado a esquerda não funciona dentro de divs que definem grids.</p>
    ]]></description>
    <name>tooltipPosition</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define um script javascript que será executado após a renderização do componente.</p>
    ]]></description>
    <name>initScript</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

    </tag>

    <tag>
        <description><![CDATA[
            &lt;p&gt;&lt;span
            class="changed_modified_2_0"&gt;Render&lt;/span&gt; an HTML checkbox
            list.&lt;/p&gt;
            &lt;p&gt;&lt;a name="decode"&gt;Decode Behavior&lt;/a&gt;&lt;/p&gt;
            &lt;ul&gt;
            &lt;p&gt;See the &lt;a
            href="SelectManyListbox.html"&gt;"Decode
            Behavior for UISelectMany Components"&lt;/a&gt; section.&lt;/p&gt;
            &lt;/ul&gt;
            &lt;p&gt;Encode Behavior&lt;/p&gt;
            &lt;ul&gt;
            &lt;p&gt;Render a "table" element. If the "styleClass" is specified,
            render the value of the "styleClass" attribute as the value of the
            "class" attribute on the "table" element. If the "style", or
            "border" attributes are specified, pass them thru &lt;span
            class="changed_added_2_0"&gt;and render their values as the "style"
            and "border" attributes on the "table", respectively.&lt;/span&gt;
            If
            the "layout" attribute is specified, and its value is
            "pageDirection", render the children elements vertically,
            otherwise horizontally, in the table. If any of the children are
            an instance of SelectItemGroup, render them as a nested table.
            Each of the children are ultimately rendererd as follows. Render
            an "input" element of "type" "checkbox" for each child component.
            Render the "name" attribute on the "input" element with the value
            of the &lt;code&gt;clientId&lt;/code&gt; of the component. Render an
            "id"
            attribute on the "input" element. Each "id" value must be unique.
            If the current SelectItem.isDisabled() returns true, render
            "disabled" as the value of the "disabled" attribute. Close out
            the "input" element. Render a "label" element. Render the "for"
            attribute of the "label" element whose value is the corresponding
            "input" element's "id" value. Render any "style" as the "class"
            attribute on the "label" element. &lt;span
            class="changed_added_2_0"&gt;If the current checkbox would be
            rendered as being checked, and there is a "selectedClass"
            attribute, append a space, followed by the value of the
            "selectedClass" attribute to any existing "class" attribute value
            on the label element. Otherwise, render the value of the
            "selectedClass" attribute as the value of the "class" attribute on
            the label element. If the current checkbox would be rendered as
            being not checked, and there is a "unselectedClass" attribute,
            append a space, followed by the value of the "unselectedClass"
            attribute to any existing "class" attribute value on the label
            element. Otherwise, render the value of the "unselectedClass"
            attribute as the value of the "class" attribute on the label
            element.&lt;/span&gt; Close out the starting "label" element and
            render
            the label value from SelectItem.getLabel(). Close out the "label"
            element. As an exception to the general rules about how to handle
            the "id" attribute, render it as an attribute on the outer "table"
            element, the value of which is the &lt;code&gt;clientId&lt;/code&gt;
            of the
            component per the rules at the beginning of this specification.
            The value of the current SelectItem is rendered as the value of
            the "value" attribute. Coerce the value of the currently rendered
            child to the type of the parent UISelectMany value following the
            Expression Language coercion rules, before comparing the values.
            If the value of the enclosing UISelectMany matches the current
            value, render "checked" as the value of the "checked" attribute.
            See the &lt;a
            href="SelectManyListbox.html"&gt;"Rendering
            the option elements" &lt;/a&gt; specification for
            &lt;code&gt;ListboxRenderer&lt;/code&gt; for more detail on how to
            render the
            "option" elements in this renderer.&lt;/p&gt;
            &lt;/ul&gt;
        ]]></description>
        <tag-name>selectManyCheckbox</tag-name>
        <component>
            <component-type>neotech.bootstrapfaces.selectManyCheckbox</component-type>
            <renderer-type>neotech.bootstrapfaces.renderer.selectManyCheckbox</renderer-type>
        </component>

        <!-- ATRIBUTOS JSF -->
        <attribute>
    <description>
        The component identifier for this component. This value must be
        unique within the closest parent component that is a naming
        container.
    </description>
    <name>id</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating whether or not this component should be rendered
        (during Render Response Phase), or processed on any subsequent
        form submit. The default value for this property is true.
    </description>
    <name>rendered</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        The current value of this component.
    </description>
    <name>value</name>
    <required>false</required>
    <type>java.lang.Object</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that the user is required to provide a submitted
        value for this input component.
    </description>
    <name>required</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this component's value must be
        converted and validated immediately (that is, during
        Apply Request Values phase), rather than waiting
        until Process Validations phase.
    </description>
    <name>immediate</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Access key that, when pressed, transfers focus
        to this element.
    </description>
    <name>accesskey</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Direction indication for text that does not inherit
        directionality.
        Valid values are "LTR" (left-to-right) and "RTL"
        (right-to-left).
    </description>
    <name>dir</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this element must never receive focus or
        be included in a subsequent submit. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as disabled="disabled".
    </description>
    <name>disabled</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A localized user presentable name for this component.
    </description>
    <name>label</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Code describing the language used in the generated markup
        for this component.
    </description>
    <name>lang</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus.
    </description>
    <name>onblur</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus
        and its value has been modified since gaining focus.
    </description>
    <name>onchange</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        clicked over this element.
    </description>
    <name>onclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        double clicked over this element.
    </description>
    <name>ondblclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element receives focus.
    </description>
    <name>onfocus</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed down over this element.
    </description>
    <name>onkeydown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed and released over this element.
    </description>
    <name>onkeypress</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        released over this element.
    </description>
    <name>onkeyup</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        pressed down over this element.
    </description>
    <name>onmousedown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved within this element.
    </description>
    <name>onmousemove</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved away from this element.
    </description>
    <name>onmouseout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved onto this element.
    </description>
    <name>onmouseover</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        <![CDATA[Javascript code executed when a pointer button is
        released over this element.]]>
    </description>
    <name>
        onmouseup
    </name>
    <required>
        false
    </required>
    <type>
        java.lang.String
    </type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when text within this
        element is selected by the user.
    </description>
    <name>onselect</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        Flag indicating that this component will prohibit changes by
        the user. The element may receive focus unless it has also
        been disabled. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as readonly="readonly".
    </description>
    <name>readonly</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        CSS style(s) to be applied when this component is rendered.
    </description>
    <name>style</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Space-separated list of CSS style class(es) to be applied when
        this element is rendered. This value must be passed through
        as the "class" attribute on generated markup.
    </description>
    <name>styleClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Position of this element in the tabbing order
        for the current document. This value must be
        an integer between 0 and 32767.
    </description>
    <name>tabindex</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Advisory title information about markup elements generated for this component.
    </description>
    <name>title</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Converter instance registered with this component.
    </description>
    <name>converter</name>
    <required>false</required>
    <type>javax.faces.convert.Converter</type>
</attribute>

        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the converter message, replacing any message
        that comes from the converter.
    </description>
    <name>converterMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validation message for the "required"
        facility, if the "required" facility is used.
    </description>
    <name>requiredMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        MethodExpression representing a validator method that will be
        called
        during Process Validations to perform correctness checks on the
        value of this component. The expression must evaluate to a
        public
        method that takes FacesContext, UIComponent, and Object
        parameters,
        with a return type of void.
    </description>
    <name>validator</name>
    <required>false</required>
    <method-signature>void validate(javax.faces.context.FacesContext,
        javax.faces.component.UIComponent, java.lang.Object)
    </method-signature>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validator message, replacing any
        message that comes from the validator.
    </description>
    <name>validatorMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        &lt;p&gt;
        MethodExpression representing a value change listener method
        that will be notified when a new value has been set for this
        input component. The expression must evaluate to a public
        method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt;
        parameter,
        with a return type of void, &lt;span class="changed_added_2_0"&gt;or
        to a public method that takes no arguments with a return type
        of void. In the latter case, the method has no way of easily
        knowing what the new value is, but this can be useful in cases
        where a notification is needed that "this value
        changed".&lt;/span&gt;
        &lt;/p&gt;
    </description>
    <name>valueChangeListener</name>
    <required>false</required>
    <method-signature>void
        valueChange(javax.faces.event.ValueChangeEvent)
    </method-signature>
</attribute>
        <attribute>
    <description>
        The ValueExpression linking this component to a property in a
        backing bean
    </description>
    <name>binding</name>
    <required>false</required>
    <type>javax.faces.component.UIComponent</type>
</attribute>
        <attribute>
    <description>
        Optional attribute that is a literal string that is the fully qualified class name of a concrete class that implements java.util.Collection, or an EL expression that evaluates to either 1. such a String, or 2. the Class object itself.
    </description>
    <name>collectionType</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        CSS style class to apply to the rendered label
        on disabled options.
    </description>
    <name>disabledClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        CSS style class to apply to the rendered label
        on enabled options.
    </description>
    <name>enabledClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        CSS style class to apply to the rendered label
        on selected options.
    </description>
    <name>selectedClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        &lt;p class="changed_modified_2_0"&gt;
        Flag indicating that, if this component is activated by the
        user,
        The "no selection option", if any, must be hidden.&lt;/p&gt;
    </description>
    <name>hideNoSelectionOption</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Orientation of the options list to be created.
        Valid values are "pageDirection" (list is laid
        out vertically), or "lineDirection" (list is
        laid out horizontally). If not specified, the
        default value is "lineDirection".
    </description>
    <name>layout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>


        <!-- ATRIBUTOS BOOTSTRAP -->
        <attribute>
    <description>Define se o label deverá ser exibido ou não</description>
    <name>showLabel</name>
    <required>false</required>
    <type>java.lang.Boolean</type>
</attribute>
        <attribute>
    <description>Layout do form. Valores possíveis: vertical, inline, horizontal. Valor padrão: vertical.</description>
    <name>formLayout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Tamanho do componente para forms com layout horizontal. Valores: 1 a 12</description>
    <name>inputSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description>Tamanho do label para forms com layout horizontal. Valores: 1 a 12</description>
    <name>labelSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description>Breve descrição sempre visível logo abaixo do componente</description>
    <name>hint</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define a posição de apresentação do tooltip.</p>
    <p>Valores possíveis: top, left, bottom, right.</p>
    <p>OBS: aparentemente o tooltip posicionado a esquerda não funciona dentro de divs que definem grids.</p>
    ]]></description>
    <name>tooltipPosition</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define um script javascript que será executado após a renderização do componente.</p>
    ]]></description>
    <name>initScript</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

    </tag>


    <tag>
        <description><![CDATA[
            &lt;p&gt;&lt;span
            class="changed_modified_2_0"&gt;Render&lt;/span&gt; a set of html
            "input" elements of type "radio".&lt;/p&gt;
            &lt;p&gt;&lt;a name="decode"&gt;Decode Behavior&lt;/a&gt;&lt;/p&gt;
            &lt;ul&gt;
            &lt;p&gt;See the &lt;a
            href="SelectManyListbox.html"&gt;"Decode
            Behavior for UISelectOne Components"&lt;/a&gt; section.&lt;/p&gt;
            &lt;/ul&gt;
            &lt;p&gt;Encode Behavior&lt;/p&gt;
            &lt;ul&gt;
            &lt;p&gt;Render a "table" element. If the "styleClass" is specified,
            render the value of the "styleClass" attribute as the value of the
            "class" attribute on the "table" element. If the "style", "border"
            attributes are specified, pass them thru &lt;span
            class="changed_added_2_0"&gt;and render their values as the "style"
            and "border" attributes on the "table", respectively.&lt;/span&gt;.
            If
            the "layout" attribute is specified, and its value is
            "pageDirection", render the children elements vertically,
            otherwise horizontally, in the table. If any of the children are
            an instance of SelectItemGroup, render them as a nested table.
            Each of the children are ultimately rendered as follows. Render
            an "input" element of "type" "radio" for each child component.
            Render the "name" attribute on the "input" element with the value
            of the &lt;code&gt;clientId&lt;/code&gt; of the component. Render an
            "id"
            attribute on the "input" element. Each "id" value must be unique.
            If the current SelectItem.isDisabled() returns true, render
            "disabled" as the value of the "disabled" attribute. Close out
            the "input" element. Render a "label" element. Render the "for"
            attribute of the "label" element whose value is the corresponding
            "input" element's "id" value. Render any "style" as the "class"
            attribute on the "label" element. Close out the starting "label"
            element and render the label value from SelectItem.getLabel().
            Close out the "label" element. As an exception to the general
            rules about how to handle the "id" attribute, render it as an
            attribute on the outer "table" element, the value of which is the
            &lt;code&gt;clientId&lt;/code&gt; of the component per the rules at
            the
            beginning of this specification. Coerce the value of the
            currently rendered child to the type of the parent UISelectOne
            value using the Expression Language coercion rules before
            comparing the values. If the value of the currently rendered
            child is equal to the value of the parent UISelectOne, render an
            appropriate HTML boolean value indicating "checked" for the
            enclosing "input". See the &lt;a
            href="SelectManyListbox.html"&gt;"Rendering
            the option elements" &lt;/a&gt; specification for
            &lt;code&gt;ListboxRenderer&lt;/code&gt; for more detail on how to
            render the
            "option" elements in this renderer.&lt;/p&gt;
            &lt;/ul&gt;
        ]]></description>
        <tag-name>selectOneRadio</tag-name>
        <component>
            <component-type>neotech.bootstrapfaces.selectOneRadio</component-type>
            <renderer-type>neotech.bootstrapfaces.renderer.selectOneRadio</renderer-type>
        </component>

        <!-- ATRIBUTOS UICOMPONENTBASE -->
        <attribute>
    <description>
        Converter instance registered with this component.
    </description>
    <name>converter</name>
    <required>false</required>
    <type>javax.faces.convert.Converter</type>
</attribute>

        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the converter message, replacing any message
        that comes from the converter.
    </description>
    <name>converterMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        The component identifier for this component. This value must be
        unique within the closest parent component that is a naming
        container.
    </description>
    <name>id</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this component's value must be
        converted and validated immediately (that is, during
        Apply Request Values phase), rather than waiting
        until Process Validations phase.
    </description>
    <name>immediate</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating whether or not this component should be rendered
        (during Render Response Phase), or processed on any subsequent
        form submit. The default value for this property is true.
    </description>
    <name>rendered</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that the user is required to provide a submitted
        value for this input component.
    </description>
    <name>required</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validation message for the "required"
        facility, if the "required" facility is used.
    </description>
    <name>requiredMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        MethodExpression representing a validator method that will be
        called
        during Process Validations to perform correctness checks on the
        value of this component. The expression must evaluate to a
        public
        method that takes FacesContext, UIComponent, and Object
        parameters,
        with a return type of void.
    </description>
    <name>validator</name>
    <required>false</required>
    <method-signature>void validate(javax.faces.context.FacesContext,
        javax.faces.component.UIComponent, java.lang.Object)
    </method-signature>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validator message, replacing any
        message that comes from the validator.
    </description>
    <name>validatorMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The current value of this component.
    </description>
    <name>value</name>
    <required>false</required>
    <type>java.lang.Object</type>
</attribute>
        <attribute>
    <description>
        &lt;p&gt;
        MethodExpression representing a value change listener method
        that will be notified when a new value has been set for this
        input component. The expression must evaluate to a public
        method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt;
        parameter,
        with a return type of void, &lt;span class="changed_added_2_0"&gt;or
        to a public method that takes no arguments with a return type
        of void. In the latter case, the method has no way of easily
        knowing what the new value is, but this can be useful in cases
        where a notification is needed that "this value
        changed".&lt;/span&gt;
        &lt;/p&gt;
    </description>
    <name>valueChangeListener</name>
    <required>false</required>
    <method-signature>void
        valueChange(javax.faces.event.ValueChangeEvent)
    </method-signature>
</attribute>
        <attribute>
    <description>
        Access key that, when pressed, transfers focus
        to this element.
    </description>
    <name>accesskey</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Direction indication for text that does not inherit
        directionality.
        Valid values are "LTR" (left-to-right) and "RTL"
        (right-to-left).
    </description>
    <name>dir</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this element must never receive focus or
        be included in a subsequent submit. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as disabled="disabled".
    </description>
    <name>disabled</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        CSS style class to apply to the rendered label
        on disabled options.
    </description>
    <name>disabledClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        CSS style class to apply to the rendered label
        on enabled options.
    </description>
    <name>enabledClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        &lt;p class="changed_modified_2_0"&gt;
        Flag indicating that, if this component is activated by the
        user,
        The "no selection option", if any, must be hidden.&lt;/p&gt;
    </description>
    <name>hideNoSelectionOption</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A localized user presentable name for this component.
    </description>
    <name>label</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Code describing the language used in the generated markup
        for this component.
    </description>
    <name>lang</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Orientation of the options list to be created.
        Valid values are "pageDirection" (list is laid
        out vertically), or "lineDirection" (list is
        laid out horizontally). If not specified, the
        default value is "lineDirection".
    </description>
    <name>layout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        Javascript code executed when this element loses focus.
    </description>
    <name>onblur</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus
        and its value has been modified since gaining focus.
    </description>
    <name>onchange</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        clicked over this element.
    </description>
    <name>onclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        double clicked over this element.
    </description>
    <name>ondblclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element receives focus.
    </description>
    <name>onfocus</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed down over this element.
    </description>
    <name>onkeydown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed and released over this element.
    </description>
    <name>onkeypress</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        released over this element.
    </description>
    <name>onkeyup</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        pressed down over this element.
    </description>
    <name>onmousedown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved within this element.
    </description>
    <name>onmousemove</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved away from this element.
    </description>
    <name>onmouseout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved onto this element.
    </description>
    <name>onmouseover</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        <![CDATA[Javascript code executed when a pointer button is
        released over this element.]]>
    </description>
    <name>
        onmouseup
    </name>
    <required>
        false
    </required>
    <type>
        java.lang.String
    </type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when text within this
        element is selected by the user.
    </description>
    <name>onselect</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        Flag indicating that this component will prohibit changes by
        the user. The element may receive focus unless it has also
        been disabled. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as readonly="readonly".
    </description>
    <name>readonly</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        CSS style(s) to be applied when this component is rendered.
    </description>
    <name>style</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Space-separated list of CSS style class(es) to be applied when
        this element is rendered. This value must be passed through
        as the "class" attribute on generated markup.
    </description>
    <name>styleClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Position of this element in the tabbing order
        for the current document. This value must be
        an integer between 0 and 32767.
    </description>
    <name>tabindex</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Advisory title information about markup elements generated for this component.
    </description>
    <name>title</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The ValueExpression linking this component to a property in a
        backing bean
    </description>
    <name>binding</name>
    <required>false</required>
    <type>javax.faces.component.UIComponent</type>
</attribute>

        <!-- ATRIBUTOS BOOTSTRAP -->
        <attribute>
    <description>Layout do form. Valores possíveis: vertical, inline, horizontal. Valor padrão: vertical.</description>
    <name>formLayout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Define se o label deverá ser exibido ou não</description>
    <name>showLabel</name>
    <required>false</required>
    <type>java.lang.Boolean</type>
</attribute>
        <attribute>
    <description>Tamanho do componente para forms com layout horizontal. Valores: 1 a 12</description>
    <name>inputSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description>Tamanho do label para forms com layout horizontal. Valores: 1 a 12</description>
    <name>labelSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define a posição de apresentação do tooltip.</p>
    <p>Valores possíveis: top, left, bottom, right.</p>
    <p>OBS: aparentemente o tooltip posicionado a esquerda não funciona dentro de divs que definem grids.</p>
    ]]></description>
    <name>tooltipPosition</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Breve descrição sempre visível logo abaixo do componente</description>
    <name>hint</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define um script javascript que será executado após a renderização do componente.</p>
    ]]></description>
    <name>initScript</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

    </tag>

    <tag>
        <description><![CDATA[
            &lt;p&gt;Render an HTML option list.&lt;/p&gt;
            &lt;p&gt;&lt;a name="decode"&gt;Decode Behavior&lt;/a&gt;&lt;/p&gt;
            &lt;ul&gt;
            &lt;p&gt;See the &lt;a
            href="SelectManyListbox.html"&gt;"Decode
            Behavior for UISelectOne Components"&lt;/a&gt; section.&lt;/p&gt;
            &lt;/ul&gt;
            &lt;p&gt;Encode Behavior&lt;/p&gt;
            &lt;ul&gt;
            &lt;p&gt;Render an HTML "select" element. Render the clientId of the
            component as the value of the "name" attribute. If the
            "styleClass" attribute is specified, render its value as the value
            of the "class" attribute on the "select" element. If the component
            to be rendered is a UISelectMany, render "true" as the value of
            the "multiple" attribute. Use the number of items as the value of
            the "size" attribute. See the &lt;a
            href="SelectManyListbox.html"&gt;"Rendering
            the option elements" &lt;/a&gt; specification for
            &lt;code&gt;ListboxRenderer&lt;/code&gt; for more detail on how to
            render the
            "option" elements in this renderer.&lt;/p&gt;
            &lt;/ul&gt;
        ]]></description>
        <tag-name>selectOneMenu</tag-name>
        <component>
            <component-type>neotech.bootstrapfaces.selectOneMenu</component-type>
            <renderer-type>neotech.bootstrapfaces.renderer.selectMenu</renderer-type>
        </component>

        <attribute>
    <description>
        The component identifier for this component. This value must be
        unique within the closest parent component that is a naming
        container.
    </description>
    <name>id</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating whether or not this component should be rendered
        (during Render Response Phase), or processed on any subsequent
        form submit. The default value for this property is true.
    </description>
    <name>rendered</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        The current value of this component.
    </description>
    <name>value</name>
    <required>false</required>
    <type>java.lang.Object</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that the user is required to provide a submitted
        value for this input component.
    </description>
    <name>required</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this component's value must be
        converted and validated immediately (that is, during
        Apply Request Values phase), rather than waiting
        until Process Validations phase.
    </description>
    <name>immediate</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Access key that, when pressed, transfers focus
        to this element.
    </description>
    <name>accesskey</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Direction indication for text that does not inherit
        directionality.
        Valid values are "LTR" (left-to-right) and "RTL"
        (right-to-left).
    </description>
    <name>dir</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this element must never receive focus or
        be included in a subsequent submit. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as disabled="disabled".
    </description>
    <name>disabled</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A localized user presentable name for this component.
    </description>
    <name>label</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Code describing the language used in the generated markup
        for this component.
    </description>
    <name>lang</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus.
    </description>
    <name>onblur</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus
        and its value has been modified since gaining focus.
    </description>
    <name>onchange</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        clicked over this element.
    </description>
    <name>onclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        double clicked over this element.
    </description>
    <name>ondblclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element receives focus.
    </description>
    <name>onfocus</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed down over this element.
    </description>
    <name>onkeydown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed and released over this element.
    </description>
    <name>onkeypress</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        released over this element.
    </description>
    <name>onkeyup</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        pressed down over this element.
    </description>
    <name>onmousedown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved within this element.
    </description>
    <name>onmousemove</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved away from this element.
    </description>
    <name>onmouseout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved onto this element.
    </description>
    <name>onmouseover</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        <![CDATA[Javascript code executed when a pointer button is
        released over this element.]]>
    </description>
    <name>
        onmouseup
    </name>
    <required>
        false
    </required>
    <type>
        java.lang.String
    </type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when text within this
        element is selected by the user.
    </description>
    <name>onselect</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        Flag indicating that this component will prohibit changes by
        the user. The element may receive focus unless it has also
        been disabled. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as readonly="readonly".
    </description>
    <name>readonly</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        CSS style(s) to be applied when this component is rendered.
    </description>
    <name>style</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Space-separated list of CSS style class(es) to be applied when
        this element is rendered. This value must be passed through
        as the "class" attribute on generated markup.
    </description>
    <name>styleClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Position of this element in the tabbing order
        for the current document. This value must be
        an integer between 0 and 32767.
    </description>
    <name>tabindex</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Advisory title information about markup elements generated for this component.
    </description>
    <name>title</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Converter instance registered with this component.
    </description>
    <name>converter</name>
    <required>false</required>
    <type>javax.faces.convert.Converter</type>
</attribute>

        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the converter message, replacing any message
        that comes from the converter.
    </description>
    <name>converterMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validation message for the "required"
        facility, if the "required" facility is used.
    </description>
    <name>requiredMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        MethodExpression representing a validator method that will be
        called
        during Process Validations to perform correctness checks on the
        value of this component. The expression must evaluate to a
        public
        method that takes FacesContext, UIComponent, and Object
        parameters,
        with a return type of void.
    </description>
    <name>validator</name>
    <required>false</required>
    <method-signature>void validate(javax.faces.context.FacesContext,
        javax.faces.component.UIComponent, java.lang.Object)
    </method-signature>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validator message, replacing any
        message that comes from the validator.
    </description>
    <name>validatorMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        &lt;p&gt;
        MethodExpression representing a value change listener method
        that will be notified when a new value has been set for this
        input component. The expression must evaluate to a public
        method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt;
        parameter,
        with a return type of void, &lt;span class="changed_added_2_0"&gt;or
        to a public method that takes no arguments with a return type
        of void. In the latter case, the method has no way of easily
        knowing what the new value is, but this can be useful in cases
        where a notification is needed that "this value
        changed".&lt;/span&gt;
        &lt;/p&gt;
    </description>
    <name>valueChangeListener</name>
    <required>false</required>
    <method-signature>void
        valueChange(javax.faces.event.ValueChangeEvent)
    </method-signature>
</attribute>
        <attribute>
    <description>
        The ValueExpression linking this component to a property in a
        backing bean
    </description>
    <name>binding</name>
    <required>false</required>
    <type>javax.faces.component.UIComponent</type>
</attribute>
        <attribute>
    <description>
        CSS style class to apply to the rendered label
        on disabled options.
    </description>
    <name>disabledClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        CSS style class to apply to the rendered label
        on enabled options.
    </description>
    <name>enabledClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <!-- ATRIBUTOS BOOTSTRAP -->
        <attribute>
    <description>Layout do form. Valores possíveis: vertical, inline, horizontal. Valor padrão: vertical.</description>
    <name>formLayout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Define se o label deverá ser exibido ou não</description>
    <name>showLabel</name>
    <required>false</required>
    <type>java.lang.Boolean</type>
</attribute>
        <attribute>
    <description>Tamanho do componente para forms com layout horizontal. Valores: 1 a 12</description>
    <name>inputSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description>Tamanho do label para forms com layout horizontal. Valores: 1 a 12</description>
    <name>labelSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define a posição de apresentação do tooltip.</p>
    <p>Valores possíveis: top, left, bottom, right.</p>
    <p>OBS: aparentemente o tooltip posicionado a esquerda não funciona dentro de divs que definem grids.</p>
    ]]></description>
    <name>tooltipPosition</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Breve descrição sempre visível logo abaixo do componente</description>
    <name>hint</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define um script javascript que será executado após a renderização do componente.</p>
    ]]></description>
    <name>initScript</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

    </tag>

    <tag>
        <description><![CDATA[
            &lt;p&gt;Renders an HTML "input" element of type "checkbox".&lt;/p&gt;
            &lt;p&gt;Decode Behavior&lt;/p&gt;
            &lt;ul&gt;
            &lt;p&gt;Obtain the &lt;code&gt;Map&lt;/code&gt; from the
            "requestParameterMap"
            property of the &lt;code&gt;ExternalContext&lt;/code&gt;. If there
            is no
            entry in the &lt;code&gt;Map&lt;/code&gt; for the "clientId" of this
            component, pass "false" to the &lt;code&gt;setSubmittedValue()&lt;/code&gt;
            method of the component, which must be an instance of
            &lt;code&gt;EditableValueHolder&lt;/code&gt;. If there is an entry,
            and its
            value is equal, ignoring case and without quotes, to any of the
            Strings: "on", "yes" or "true" pass true to the
            &lt;code&gt;setSubmittedValue()&lt;/code&gt; method of the
            component.&lt;/p&gt;
            &lt;/ul&gt;
            &lt;p&gt;Encode Behavior&lt;/p&gt;
            &lt;ul&gt;
            &lt;p&gt;
            Render the clientId of the component as the value of the "name"
            attribute. If the current value of the component is "true",
            output the "checked" attribute (must be rendered as
            checked="checked").
            If the "styleClass" attribute is specified, render its value as the
            value
            of the "class" attribute.&lt;/p&gt; &lt;/ul&gt;
        ]]></description>
        <tag-name>checkbox</tag-name>
        <component>
            <component-type>neotech.bootstrapfaces.selectBooleanCheckbox</component-type>
            <renderer-type>neotech.bootstrapfaces.renderer.selectBooleanCheckbox</renderer-type>
        </component>

        <attribute>
    <description>
        Converter instance registered with this component.
    </description>
    <name>converter</name>
    <required>false</required>
    <type>javax.faces.convert.Converter</type>
</attribute>

        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the converter message, replacing any message
        that comes from the converter.
    </description>
    <name>converterMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        The component identifier for this component. This value must be
        unique within the closest parent component that is a naming
        container.
    </description>
    <name>id</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this component's value must be
        converted and validated immediately (that is, during
        Apply Request Values phase), rather than waiting
        until Process Validations phase.
    </description>
    <name>immediate</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating whether or not this component should be rendered
        (during Render Response Phase), or processed on any subsequent
        form submit. The default value for this property is true.
    </description>
    <name>rendered</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that the user is required to provide a submitted
        value for this input component.
    </description>
    <name>required</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validation message for the "required"
        facility, if the "required" facility is used.
    </description>
    <name>requiredMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        MethodExpression representing a validator method that will be
        called
        during Process Validations to perform correctness checks on the
        value of this component. The expression must evaluate to a
        public
        method that takes FacesContext, UIComponent, and Object
        parameters,
        with a return type of void.
    </description>
    <name>validator</name>
    <required>false</required>
    <method-signature>void validate(javax.faces.context.FacesContext,
        javax.faces.component.UIComponent, java.lang.Object)
    </method-signature>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validator message, replacing any
        message that comes from the validator.
    </description>
    <name>validatorMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The current value of this component.
    </description>
    <name>value</name>
    <required>false</required>
    <type>java.lang.Object</type>
</attribute>
        <attribute>
    <description>
        &lt;p&gt;
        MethodExpression representing a value change listener method
        that will be notified when a new value has been set for this
        input component. The expression must evaluate to a public
        method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt;
        parameter,
        with a return type of void, &lt;span class="changed_added_2_0"&gt;or
        to a public method that takes no arguments with a return type
        of void. In the latter case, the method has no way of easily
        knowing what the new value is, but this can be useful in cases
        where a notification is needed that "this value
        changed".&lt;/span&gt;
        &lt;/p&gt;
    </description>
    <name>valueChangeListener</name>
    <required>false</required>
    <method-signature>void
        valueChange(javax.faces.event.ValueChangeEvent)
    </method-signature>
</attribute>
        <attribute>
    <description>
        Access key that, when pressed, transfers focus
        to this element.
    </description>
    <name>accesskey</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Direction indication for text that does not inherit
        directionality.
        Valid values are "LTR" (left-to-right) and "RTL"
        (right-to-left).
    </description>
    <name>dir</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this element must never receive focus or
        be included in a subsequent submit. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as disabled="disabled".
    </description>
    <name>disabled</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A localized user presentable name for this component.
    </description>
    <name>label</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Code describing the language used in the generated markup
        for this component.
    </description>
    <name>lang</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus.
    </description>
    <name>onblur</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus
        and its value has been modified since gaining focus.
    </description>
    <name>onchange</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        clicked over this element.
    </description>
    <name>onclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        double clicked over this element.
    </description>
    <name>ondblclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element receives focus.
    </description>
    <name>onfocus</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed down over this element.
    </description>
    <name>onkeydown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed and released over this element.
    </description>
    <name>onkeypress</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        released over this element.
    </description>
    <name>onkeyup</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        pressed down over this element.
    </description>
    <name>onmousedown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved within this element.
    </description>
    <name>onmousemove</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved away from this element.
    </description>
    <name>onmouseout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved onto this element.
    </description>
    <name>onmouseover</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        <![CDATA[Javascript code executed when a pointer button is
        released over this element.]]>
    </description>
    <name>
        onmouseup
    </name>
    <required>
        false
    </required>
    <type>
        java.lang.String
    </type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when text within this
        element is selected by the user.
    </description>
    <name>onselect</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        Flag indicating that this component will prohibit changes by
        the user. The element may receive focus unless it has also
        been disabled. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as readonly="readonly".
    </description>
    <name>readonly</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        CSS style(s) to be applied when this component is rendered.
    </description>
    <name>style</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Space-separated list of CSS style class(es) to be applied when
        this element is rendered. This value must be passed through
        as the "class" attribute on generated markup.
    </description>
    <name>styleClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Position of this element in the tabbing order
        for the current document. This value must be
        an integer between 0 and 32767.
    </description>
    <name>tabindex</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Advisory title information about markup elements generated for this component.
    </description>
    <name>title</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        The ValueExpression linking this component to a property in a
        backing bean
    </description>
    <name>binding</name>
    <required>false</required>
    <type>javax.faces.component.UIComponent</type>
</attribute>

        <!-- ATRIBUTOS BOOTSTRAP -->
        <attribute>
    <description>Define se o label deverá ser exibido ou não</description>
    <name>showLabel</name>
    <required>false</required>
    <type>java.lang.Boolean</type>
</attribute>
        <attribute>
    <description>Layout do form. Valores possíveis: vertical, inline, horizontal. Valor padrão: vertical.</description>
    <name>formLayout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Tamanho do componente para forms com layout horizontal. Valores: 1 a 12</description>
    <name>inputSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description>Tamanho do label para forms com layout horizontal. Valores: 1 a 12</description>
    <name>labelSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description>Breve descrição sempre visível logo abaixo do componente</description>
    <name>hint</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

    </tag>

    <tag>
        <description><![CDATA[
            &lt;p&gt;Render an HTML option list.&lt;/p&gt;
            &lt;p&gt;&lt;a name="decode"&gt;Decode Behavior&lt;/a&gt;&lt;/p&gt;
            &lt;ul&gt;
            &lt;p&gt;See the &lt;a
            href="SelectManyListbox.html"&gt;"Decode
            Behavior for UISelectOne Components"&lt;/a&gt; section.&lt;/p&gt;
            &lt;/ul&gt;
            &lt;p&gt;Encode Behavior&lt;/p&gt;
            &lt;ul&gt;
            &lt;p&gt;Render an HTML "select" element. Render the clientId of the
            component as the value of the "name" attribute. If the
            "styleClass" attribute is specified, render its value as the value
            of the "class" attribute on the "select" element. If the component
            to be rendered is a UISelectMany, render "true" as the value of
            the "multiple" attribute. Use the number of items as the value of
            the "size" attribute. See the &lt;a
            href="SelectManyListbox.html"&gt;"Rendering
            the option elements" &lt;/a&gt; specification for
            &lt;code&gt;ListboxRenderer&lt;/code&gt; for more detail on how to
            render the
            "option" elements in this renderer.&lt;/p&gt;
            &lt;/ul&gt;
        ]]></description>
        <tag-name>select</tag-name>
        <component>
            <component-type>neotech.bootstrapfaces.selectOneMenu</component-type>
            <renderer-type>neotech.bootstrapfaces.renderer.selectMenu</renderer-type>
        </component>

        <attribute>
    <description>
        The component identifier for this component. This value must be
        unique within the closest parent component that is a naming
        container.
    </description>
    <name>id</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating whether or not this component should be rendered
        (during Render Response Phase), or processed on any subsequent
        form submit. The default value for this property is true.
    </description>
    <name>rendered</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        The current value of this component.
    </description>
    <name>value</name>
    <required>false</required>
    <type>java.lang.Object</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that the user is required to provide a submitted
        value for this input component.
    </description>
    <name>required</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this component's value must be
        converted and validated immediately (that is, during
        Apply Request Values phase), rather than waiting
        until Process Validations phase.
    </description>
    <name>immediate</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Access key that, when pressed, transfers focus
        to this element.
    </description>
    <name>accesskey</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Direction indication for text that does not inherit
        directionality.
        Valid values are "LTR" (left-to-right) and "RTL"
        (right-to-left).
    </description>
    <name>dir</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this element must never receive focus or
        be included in a subsequent submit. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as disabled="disabled".
    </description>
    <name>disabled</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A localized user presentable name for this component.
    </description>
    <name>label</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Code describing the language used in the generated markup
        for this component.
    </description>
    <name>lang</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus.
    </description>
    <name>onblur</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus
        and its value has been modified since gaining focus.
    </description>
    <name>onchange</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        clicked over this element.
    </description>
    <name>onclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        double clicked over this element.
    </description>
    <name>ondblclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element receives focus.
    </description>
    <name>onfocus</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed down over this element.
    </description>
    <name>onkeydown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed and released over this element.
    </description>
    <name>onkeypress</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        released over this element.
    </description>
    <name>onkeyup</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        pressed down over this element.
    </description>
    <name>onmousedown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved within this element.
    </description>
    <name>onmousemove</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved away from this element.
    </description>
    <name>onmouseout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved onto this element.
    </description>
    <name>onmouseover</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        <![CDATA[Javascript code executed when a pointer button is
        released over this element.]]>
    </description>
    <name>
        onmouseup
    </name>
    <required>
        false
    </required>
    <type>
        java.lang.String
    </type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when text within this
        element is selected by the user.
    </description>
    <name>onselect</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        Flag indicating that this component will prohibit changes by
        the user. The element may receive focus unless it has also
        been disabled. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as readonly="readonly".
    </description>
    <name>readonly</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        CSS style(s) to be applied when this component is rendered.
    </description>
    <name>style</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Space-separated list of CSS style class(es) to be applied when
        this element is rendered. This value must be passed through
        as the "class" attribute on generated markup.
    </description>
    <name>styleClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Position of this element in the tabbing order
        for the current document. This value must be
        an integer between 0 and 32767.
    </description>
    <name>tabindex</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Advisory title information about markup elements generated for this component.
    </description>
    <name>title</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Converter instance registered with this component.
    </description>
    <name>converter</name>
    <required>false</required>
    <type>javax.faces.convert.Converter</type>
</attribute>

        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the converter message, replacing any message
        that comes from the converter.
    </description>
    <name>converterMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validation message for the "required"
        facility, if the "required" facility is used.
    </description>
    <name>requiredMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        MethodExpression representing a validator method that will be
        called
        during Process Validations to perform correctness checks on the
        value of this component. The expression must evaluate to a
        public
        method that takes FacesContext, UIComponent, and Object
        parameters,
        with a return type of void.
    </description>
    <name>validator</name>
    <required>false</required>
    <method-signature>void validate(javax.faces.context.FacesContext,
        javax.faces.component.UIComponent, java.lang.Object)
    </method-signature>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validator message, replacing any
        message that comes from the validator.
    </description>
    <name>validatorMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        &lt;p&gt;
        MethodExpression representing a value change listener method
        that will be notified when a new value has been set for this
        input component. The expression must evaluate to a public
        method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt;
        parameter,
        with a return type of void, &lt;span class="changed_added_2_0"&gt;or
        to a public method that takes no arguments with a return type
        of void. In the latter case, the method has no way of easily
        knowing what the new value is, but this can be useful in cases
        where a notification is needed that "this value
        changed".&lt;/span&gt;
        &lt;/p&gt;
    </description>
    <name>valueChangeListener</name>
    <required>false</required>
    <method-signature>void
        valueChange(javax.faces.event.ValueChangeEvent)
    </method-signature>
</attribute>
        <attribute>
    <description>
        The ValueExpression linking this component to a property in a
        backing bean
    </description>
    <name>binding</name>
    <required>false</required>
    <type>javax.faces.component.UIComponent</type>
</attribute>
        <attribute>
    <description>
        CSS style class to apply to the rendered label
        on disabled options.
    </description>
    <name>disabledClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        CSS style class to apply to the rendered label
        on enabled options.
    </description>
    <name>enabledClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <!-- ATRIBUTOS BOOTSTRAP -->
        <attribute>
    <description>Layout do form. Valores possíveis: vertical, inline, horizontal. Valor padrão: vertical.</description>
    <name>formLayout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Define se o label deverá ser exibido ou não</description>
    <name>showLabel</name>
    <required>false</required>
    <type>java.lang.Boolean</type>
</attribute>
        <attribute>
    <description>Tamanho do componente para forms com layout horizontal. Valores: 1 a 12</description>
    <name>inputSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description>Tamanho do label para forms com layout horizontal. Valores: 1 a 12</description>
    <name>labelSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define a posição de apresentação do tooltip.</p>
    <p>Valores possíveis: top, left, bottom, right.</p>
    <p>OBS: aparentemente o tooltip posicionado a esquerda não funciona dentro de divs que definem grids.</p>
    ]]></description>
    <name>tooltipPosition</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Breve descrição sempre visível logo abaixo do componente</description>
    <name>hint</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define um script javascript que será executado após a renderização do componente.</p>
    ]]></description>
    <name>initScript</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

    </tag>

    <tag>
        <description><![CDATA[

        ]]></description>
        <tag-name>chosen</tag-name>
        <component>
            <component-type>neotech.bootstrapfaces.chosen</component-type>
            <renderer-type>neotech.bootstrapfaces.renderer.selectMenu</renderer-type>
        </component>

        <attribute>
    <description>
        The component identifier for this component. This value must be
        unique within the closest parent component that is a naming
        container.
    </description>
    <name>id</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating whether or not this component should be rendered
        (during Render Response Phase), or processed on any subsequent
        form submit. The default value for this property is true.
    </description>
    <name>rendered</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        The current value of this component.
    </description>
    <name>value</name>
    <required>false</required>
    <type>java.lang.Object</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that the user is required to provide a submitted
        value for this input component.
    </description>
    <name>required</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this component's value must be
        converted and validated immediately (that is, during
        Apply Request Values phase), rather than waiting
        until Process Validations phase.
    </description>
    <name>immediate</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Access key that, when pressed, transfers focus
        to this element.
    </description>
    <name>accesskey</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Direction indication for text that does not inherit
        directionality.
        Valid values are "LTR" (left-to-right) and "RTL"
        (right-to-left).
    </description>
    <name>dir</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this element must never receive focus or
        be included in a subsequent submit. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as disabled="disabled".
    </description>
    <name>disabled</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A localized user presentable name for this component.
    </description>
    <name>label</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Code describing the language used in the generated markup
        for this component.
    </description>
    <name>lang</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus.
    </description>
    <name>onblur</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus
        and its value has been modified since gaining focus.
    </description>
    <name>onchange</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        clicked over this element.
    </description>
    <name>onclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        double clicked over this element.
    </description>
    <name>ondblclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element receives focus.
    </description>
    <name>onfocus</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed down over this element.
    </description>
    <name>onkeydown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed and released over this element.
    </description>
    <name>onkeypress</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        released over this element.
    </description>
    <name>onkeyup</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        pressed down over this element.
    </description>
    <name>onmousedown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved within this element.
    </description>
    <name>onmousemove</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved away from this element.
    </description>
    <name>onmouseout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved onto this element.
    </description>
    <name>onmouseover</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        <![CDATA[Javascript code executed when a pointer button is
        released over this element.]]>
    </description>
    <name>
        onmouseup
    </name>
    <required>
        false
    </required>
    <type>
        java.lang.String
    </type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when text within this
        element is selected by the user.
    </description>
    <name>onselect</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        Flag indicating that this component will prohibit changes by
        the user. The element may receive focus unless it has also
        been disabled. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as readonly="readonly".
    </description>
    <name>readonly</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        CSS style(s) to be applied when this component is rendered.
    </description>
    <name>style</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Space-separated list of CSS style class(es) to be applied when
        this element is rendered. This value must be passed through
        as the "class" attribute on generated markup.
    </description>
    <name>styleClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Position of this element in the tabbing order
        for the current document. This value must be
        an integer between 0 and 32767.
    </description>
    <name>tabindex</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Advisory title information about markup elements generated for this component.
    </description>
    <name>title</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Converter instance registered with this component.
    </description>
    <name>converter</name>
    <required>false</required>
    <type>javax.faces.convert.Converter</type>
</attribute>

        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the converter message, replacing any message
        that comes from the converter.
    </description>
    <name>converterMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validation message for the "required"
        facility, if the "required" facility is used.
    </description>
    <name>requiredMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        MethodExpression representing a validator method that will be
        called
        during Process Validations to perform correctness checks on the
        value of this component. The expression must evaluate to a
        public
        method that takes FacesContext, UIComponent, and Object
        parameters,
        with a return type of void.
    </description>
    <name>validator</name>
    <required>false</required>
    <method-signature>void validate(javax.faces.context.FacesContext,
        javax.faces.component.UIComponent, java.lang.Object)
    </method-signature>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validator message, replacing any
        message that comes from the validator.
    </description>
    <name>validatorMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        &lt;p&gt;
        MethodExpression representing a value change listener method
        that will be notified when a new value has been set for this
        input component. The expression must evaluate to a public
        method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt;
        parameter,
        with a return type of void, &lt;span class="changed_added_2_0"&gt;or
        to a public method that takes no arguments with a return type
        of void. In the latter case, the method has no way of easily
        knowing what the new value is, but this can be useful in cases
        where a notification is needed that "this value
        changed".&lt;/span&gt;
        &lt;/p&gt;
    </description>
    <name>valueChangeListener</name>
    <required>false</required>
    <method-signature>void
        valueChange(javax.faces.event.ValueChangeEvent)
    </method-signature>
</attribute>
        <attribute>
    <description>
        The ValueExpression linking this component to a property in a
        backing bean
    </description>
    <name>binding</name>
    <required>false</required>
    <type>javax.faces.component.UIComponent</type>
</attribute>
        <attribute>
    <description>
        CSS style class to apply to the rendered label
        on disabled options.
    </description>
    <name>disabledClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        CSS style class to apply to the rendered label
        on enabled options.
    </description>
    <name>enabledClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <!-- ATRIBUTOS BOOTSTRAP -->
        <attribute>
    <description>Layout do form. Valores possíveis: vertical, inline, horizontal. Valor padrão: vertical.</description>
    <name>formLayout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Define se o label deverá ser exibido ou não</description>
    <name>showLabel</name>
    <required>false</required>
    <type>java.lang.Boolean</type>
</attribute>
        <attribute>
    <description>Tamanho do componente para forms com layout horizontal. Valores: 1 a 12</description>
    <name>inputSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description>Tamanho do label para forms com layout horizontal. Valores: 1 a 12</description>
    <name>labelSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define a posição de apresentação do tooltip.</p>
    <p>Valores possíveis: top, left, bottom, right.</p>
    <p>OBS: aparentemente o tooltip posicionado a esquerda não funciona dentro de divs que definem grids.</p>
    ]]></description>
    <name>tooltipPosition</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Breve descrição sempre visível logo abaixo do componente</description>
    <name>hint</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define um script javascript que será executado após a renderização do componente.</p>
    ]]></description>
    <name>initScript</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

    </tag>

    <tag>
        <description><![CDATA[

        ]]></description>
        <tag-name>chosenMultiple</tag-name>
        <component>
            <component-type>neotech.bootstrapfaces.chosenMultiple</component-type>
            <renderer-type>neotech.bootstrapfaces.renderer.selectMenu</renderer-type>
        </component>

        <attribute>
    <description>
        The component identifier for this component. This value must be
        unique within the closest parent component that is a naming
        container.
    </description>
    <name>id</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating whether or not this component should be rendered
        (during Render Response Phase), or processed on any subsequent
        form submit. The default value for this property is true.
    </description>
    <name>rendered</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        The current value of this component.
    </description>
    <name>value</name>
    <required>false</required>
    <type>java.lang.Object</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that the user is required to provide a submitted
        value for this input component.
    </description>
    <name>required</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this component's value must be
        converted and validated immediately (that is, during
        Apply Request Values phase), rather than waiting
        until Process Validations phase.
    </description>
    <name>immediate</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        Access key that, when pressed, transfers focus
        to this element.
    </description>
    <name>accesskey</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Direction indication for text that does not inherit
        directionality.
        Valid values are "LTR" (left-to-right) and "RTL"
        (right-to-left).
    </description>
    <name>dir</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Flag indicating that this element must never receive focus or
        be included in a subsequent submit. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as disabled="disabled".
    </description>
    <name>disabled</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        A localized user presentable name for this component.
    </description>
    <name>label</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Code describing the language used in the generated markup
        for this component.
    </description>
    <name>lang</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus.
    </description>
    <name>onblur</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element loses focus
        and its value has been modified since gaining focus.
    </description>
    <name>onchange</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        clicked over this element.
    </description>
    <name>onclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        double clicked over this element.
    </description>
    <name>ondblclick</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when this element receives focus.
    </description>
    <name>onfocus</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed down over this element.
    </description>
    <name>onkeydown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        pressed and released over this element.
    </description>
    <name>onkeypress</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a key is
        released over this element.
    </description>
    <name>onkeyup</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        pressed down over this element.
    </description>
    <name>onmousedown</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved within this element.
    </description>
    <name>onmousemove</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved away from this element.
    </description>
    <name>onmouseout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when a pointer button is
        moved onto this element.
    </description>
    <name>onmouseover</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        <![CDATA[Javascript code executed when a pointer button is
        released over this element.]]>
    </description>
    <name>
        onmouseup
    </name>
    <required>
        false
    </required>
    <type>
        java.lang.String
    </type>
</attribute>
        <attribute>
    <description>
        Javascript code executed when text within this
        element is selected by the user.
    </description>
    <name>onselect</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        Flag indicating that this component will prohibit changes by
        the user. The element may receive focus unless it has also
        been disabled. A value of false causes
        no attribute to be rendered, while a value of true causes the
        attribute to be rendered as readonly="readonly".
    </description>
    <name>readonly</name>
    <required>false</required>
    <type>boolean</type>
</attribute>
        <attribute>
    <description>
        CSS style(s) to be applied when this component is rendered.
    </description>
    <name>style</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Space-separated list of CSS style class(es) to be applied when
        this element is rendered. This value must be passed through
        as the "class" attribute on generated markup.
    </description>
    <name>styleClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Position of this element in the tabbing order
        for the current document. This value must be
        an integer between 0 and 32767.
    </description>
    <name>tabindex</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Advisory title information about markup elements generated for this component.
    </description>
    <name>title</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        Converter instance registered with this component.
    </description>
    <name>converter</name>
    <required>false</required>
    <type>javax.faces.convert.Converter</type>
</attribute>

        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the converter message, replacing any message
        that comes from the converter.
    </description>
    <name>converterMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validation message for the "required"
        facility, if the "required" facility is used.
    </description>
    <name>requiredMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        MethodExpression representing a validator method that will be
        called
        during Process Validations to perform correctness checks on the
        value of this component. The expression must evaluate to a
        public
        method that takes FacesContext, UIComponent, and Object
        parameters,
        with a return type of void.
    </description>
    <name>validator</name>
    <required>false</required>
    <method-signature>void validate(javax.faces.context.FacesContext,
        javax.faces.component.UIComponent, java.lang.Object)
    </method-signature>
</attribute>
        <attribute>
    <description>
        A ValueExpression enabled attribute that, if present, will be
        used as the text of the validator message, replacing any
        message that comes from the validator.
    </description>
    <name>validatorMessage</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        &lt;p&gt;
        MethodExpression representing a value change listener method
        that will be notified when a new value has been set for this
        input component. The expression must evaluate to a public
        method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt;
        parameter,
        with a return type of void, &lt;span class="changed_added_2_0"&gt;or
        to a public method that takes no arguments with a return type
        of void. In the latter case, the method has no way of easily
        knowing what the new value is, but this can be useful in cases
        where a notification is needed that "this value
        changed".&lt;/span&gt;
        &lt;/p&gt;
    </description>
    <name>valueChangeListener</name>
    <required>false</required>
    <method-signature>void
        valueChange(javax.faces.event.ValueChangeEvent)
    </method-signature>
</attribute>
        <attribute>
    <description>
        The ValueExpression linking this component to a property in a
        backing bean
    </description>
    <name>binding</name>
    <required>false</required>
    <type>javax.faces.component.UIComponent</type>
</attribute>
        <attribute>
    <description>
        CSS style class to apply to the rendered label
        on disabled options.
    </description>
    <name>disabledClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>
        CSS style class to apply to the rendered label
        on enabled options.
    </description>
    <name>enabledClass</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

        <!-- ATRIBUTOS BOOTSTRAP -->
        <attribute>
    <description>Layout do form. Valores possíveis: vertical, inline, horizontal. Valor padrão: vertical.</description>
    <name>formLayout</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Define se o label deverá ser exibido ou não</description>
    <name>showLabel</name>
    <required>false</required>
    <type>java.lang.Boolean</type>
</attribute>
        <attribute>
    <description>Tamanho do componente para forms com layout horizontal. Valores: 1 a 12</description>
    <name>inputSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description>Tamanho do label para forms com layout horizontal. Valores: 1 a 12</description>
    <name>labelSize</name>
    <required>false</required>
    <type>java.lang.Integer</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define a posição de apresentação do tooltip.</p>
    <p>Valores possíveis: top, left, bottom, right.</p>
    <p>OBS: aparentemente o tooltip posicionado a esquerda não funciona dentro de divs que definem grids.</p>
    ]]></description>
    <name>tooltipPosition</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description>Breve descrição sempre visível logo abaixo do componente</description>
    <name>hint</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>
        <attribute>
    <description><![CDATA[
    <p>Define um script javascript que será executado após a renderização do componente.</p>
    ]]></description>
    <name>initScript</name>
    <required>false</required>
    <type>java.lang.String</type>
</attribute>

    </tag>

<tag>
    <tag-name>enumConverter</tag-name>
    <converter>
        <converter-id>javax.faces.convert.EnumConverter</converter-id>
    </converter>
</tag>
<tag>
    <tag-name>zeroFillerConverter</tag-name>
    <converter>
        <converter-id>br.com.neotech.bootstrapfaces.converter.zeroFiller</converter-id>
    </converter>
    <attribute>
        <name>minIntegerDigits</name>
    </attribute>
</tag>
<tag>
    <tag-name>cpfConverter</tag-name>
    <converter>
        <converter-id>br.com.neotech.bootstrapfaces.converter.cpf</converter-id>
    </converter>
</tag>
<tag>
    <tag-name>cnpjConverter</tag-name>
    <converter>
        <converter-id>br.com.neotech.bootstrapfaces.converter.cnpj</converter-id>
    </converter>
</tag>
<tag>
    <tag-name>cnarhConverter</tag-name>
    <converter>
        <converter-id>br.com.neotech.bootstrapfaces.converter.cnarh</converter-id>
    </converter>
</tag>
<tag>
    <tag-name>cepConverter</tag-name>
    <converter>
        <converter-id>br.com.neotech.bootstrapfaces.converter.cep</converter-id>
    </converter>
</tag>
<tag>
    <tag-name>telefoneConverter</tag-name>
    <converter>
        <converter-id>br.com.neotech.bootstrapfaces.converter.telefone</converter-id>
    </converter>
</tag>
<tag>
    <tag-name>booleanConverter</tag-name>
    <converter>
        <converter-id>br.com.neotech.bootstrapfaces.converter.boolean</converter-id>
    </converter>
</tag>
<tag>
    <tag-name>decimalConverter</tag-name>
    <converter>
        <converter-id>br.com.neotech.bootstrapfaces.converter.decimal</converter-id>
    </converter>
</tag>
<tag>
    <tag-name>cpfCnpjConverter</tag-name>
    <converter>
        <converter-id>br.com.neotech.bootstrapfaces.converter.cpfcnpj</converter-id>
    </converter>
</tag>
<tag>
    <tag-name>numeroProcessoConverter</tag-name>
    <converter>
        <converter-id>br.com.neotech.bootstrapfaces.converter.numeroprocesso</converter-id>
    </converter>
</tag>
<tag>
    <tag-name>numeroResolucaoConverter</tag-name>
    <converter>
        <converter-id>br.com.neotech.bootstrapfaces.converter.resolucao</converter-id>
    </converter>
</tag>
<tag>
    <tag-name>entityConverter</tag-name>
    <converter>
        <converter-id>br.com.neotech.bootstrapfaces.converter.entity</converter-id>
    </converter>
</tag>

<tag>
    <tag-name>cpfValidator</tag-name>
    <validator>
        <validator-id>br.com.neotech.bootstrapfaces.validator.cpf</validator-id>
    </validator>
</tag>
<tag>
    <tag-name>cnpjValidator</tag-name>
    <validator>
        <validator-id>br.com.neotech.bootstrapfaces.validator.cnpj</validator-id>
    </validator>
</tag>
<tag>
    <tag-name>cnarhValidator</tag-name>
    <validator>
        <validator-id>br.com.neotech.bootstrapfaces.validator.cnarh</validator-id>
    </validator>
</tag>
<tag>
    <tag-name>emailValidator</tag-name>
    <validator>
        <validator-id>br.com.neotech.bootstrapfaces.validator.email</validator-id>
    </validator>
</tag>
<tag>
    <tag-name>requiredCheckboxValidator</tag-name>
    <validator>
        <validator-id>br.com.neotech.bootstrapfaces.validator.requiredCheckbox</validator-id>
    </validator>
</tag>
<tag>
    <tag-name>tipoArquivoValidator</tag-name>
    <description>Verifica se o arquivo possui um dos tipos permitidos.</description>
    <attribute>
        <description><![CDATA[Extensões permitidas separadas por ","]]></description>
        <name>tipos</name>
        <required>true</required>
        <type>java.lang.String</type>
    </attribute>   
    <validator>
        <validator-id>br.com.neotech.bootstrapfaces.validator.tipoArquivo</validator-id>
    </validator>
</tag>
<tag>
    <tag-name>tamanhoArquivoValidator</tag-name>
    <description>Verifica se o arquivo não ultrapassa o limite definido.</description>
    <attribute>
        <description><![CDATA[Tamanho em "bytes" para o arquivo. Valor padrão: 10485760 bytes (10MB).]]></description>
        <name>tamanho</name>
        <required>false</required>
        <type>java.lang.Long</type>
    </attribute>        
    <validator>
        <validator-id>br.com.neotech.bootstrapfaces.validator.tamanhoArquivo</validator-id>
    </validator>
</tag>
<tag>
    <tag-name>cepValidator</tag-name>
    <description>Verifica se o CEP estã dentro dos padrões exigidos.</description>
    <validator>
        <validator-id>br.com.neotech.bootstrapfaces.validator.cep</validator-id>
    </validator>
</tag>
<tag>
    <tag-name>telefoneValidator</tag-name>
    <description>Verifica se o Telefone estã dentro dos padrões exigidos.</description>
    <validator>
        <validator-id>br.com.neotech.bootstrapfaces.validator.telefone</validator-id>
    </validator>
</tag>
<tag>
    <tag-name>tamanhoTextAreaValidator</tag-name>
    <description>Verifica se o arquivo não ultrapassa o limite definido.</description>
    <attribute>
        <description><![CDATA[Tamanho em caracteres para o campo. Valor padrão: 500.]]></description>
        <name>maxlength</name>
        <required>false</required>
        <type>java.lang.Long</type>
    </attribute>
    <validator>
        <validator-id>br.com.neotech.bootstrapfaces.validator.tamanhoTextArea</validator-id>
    </validator>
</tag>

</facelet-taglib>
